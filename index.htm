<!DOCTYPE html>
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>LONEPYCOMPILER</title>
  <link rel="stylesheet" href="./mycompiler/codemirror.css">
  <link rel="stylesheet" href="./mycompiler/style.css">
  <link rel="stylesheet" href="./mycompiler/foldgutter.css">
<link rel="stylesheet" href="./mycompiler/css2">
 <link type="text/css" rel="stylesheet" href="./mycompiler/css2(1)">
<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
/>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.9/codemirror.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.9/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.9/mode/python/python.min.js"></script>
 <!-- Include Compromise.js library -->
  <script src="https://unpkg.com/compromise@13.11.2/builds/compromise.min.js"></script>
  <!-- Include Vue.js library -->
  <script src="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"></script>
  <!-- Include opentype.js library -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/opentype.js/1.3.3/opentype.min.js"></script>
 <link rel="stylesheet" href="./mycompiler/codemirror.css">
  <link rel="stylesheet" href="./mycompiler/style.css">
  <link rel="stylesheet" href="./mycompiler/foldgutter.css">
<link rel="stylesheet" href="./mycompiler/css2">
 <link type="text/css" rel="stylesheet" href="./mycompiler/css2(1)"></head>

<style>
 @import url('https://fonts.googleapis.com/css2?family=Homemade+Apple&family=Lobster&display=swap');
 @import url(https://fonts.googleapis.com/css?family=Indie+Flower);
</style>
</head>
<body>

<div class="wrapper side-panel-close">
  <div class="main">

<div id="code101">
 <ul id="side-menu">

  <li class="facebook"id="singleClick"style="background:#3b5998;">
    >>RUN
    <i class="fa fa-play" style="font-size:13px; height:27px;width:27px;margin-top:2px; display:flex; align-items:center; justify-content:center;margin-right:5px;cursor: pointer;border-radius:100px;color:white;border:2px solid black;background: red;box-shadow:  5px 5px 10px #18243d,-5px -5px 10px #5e8ef3;"></i>
  </li>
<li class="facebook" id="skulpt_run" style="background:#3b5998; display:none;"></li>
  <li class="facebook" id="copyButton" style="background:#3b5998; display:none;"></li>
<script>
// Select the main clickable element
const singleClick = document.getElementById('singleClick');

// Select the elements to trigger
const skulptRun = document.getElementById('skulpt_run');
const copyButton = document.getElementById('copyButton');

// Attach a click event listener to the main element
singleClick.addEventListener('click', () => {
  // Simulate a click on "skulpt_run"
  skulptRun.click();

  // Simulate a click on "copyButton"
  copyButton.click();
});

// Example: Define the behavior of the "skulpt_run" click
skulptRun.addEventListener('click', () => {
  console.log('skulpt_run clicked!');
});

// Example: Define the behavior of the "copyButton" click
copyButton.addEventListener('click', () => {
  console.log('copyButton clicked!');
});


</script>
<li class="facebook"id="clearoutput"style="background:#3b5998;">
    >>CLEAR
    <i class="fa fa-trash" style="font-size:13px; height:27px;width:27px;margin-top:2px; display:flex; align-items:center; justify-content:center;margin-right:5px;cursor: pointer;border-radius:100px;color:white;border:2px solid black;background: #c32aa3;box-shadow:  5px 5px 10px #18243d,-5px -5px 10px #5e8ef3;"></i>
  </li>
<li class="facebook"id="icon101"style="background:#3b5998;">
    >>FULL S
    <i class="fa fa-expand" style="font-size:13px; height:27px;width:27px;margin-top:2px; display:flex; align-items:center; justify-content:center;margin-right:5px;cursor: pointer;border-radius:100px;color:white;border:2px solid black;background:  #0caa41;box-shadow:  5px 5px 10px #18243d,-5px -5px 10px #5e8ef3;"></i>
  </li>
<li class="facebook"id="icon102"style="background:#3b5998;display:none;">
    >>EXIT
    <i class="fa fa-compress" style="font-size:13px; height:27px;width:27px;margin-top:2px; display:flex; align-items:center; justify-content:center;margin-right:5px;cursor: pointer;border-radius:100px;color:white;border:2px solid black;background:  #0caa41;box-shadow:  5px 5px 10px #18243d,-5px -5px 10px #5e8ef3;"></i>
  </li>

<li class="facebook"id="textIncrease"style="background:#3b5998;">
    >>FONT+
    <i class="fa fa-font" style="font-size:13px; height:27px;width:27px;margin-top:2px; display:flex; align-items:center; justify-content:center;margin-right:5px;cursor: pointer;border-radius:100px;color:white;border:2px solid black;background: #fbbc05;box-shadow:  5px 5px 10px #18243d,-5px -5px 10px #5e8ef3;font-size:12px;">+</i>
  </li>
<li class="facebook"id="textDecrease"style="background:#3b5998;">
    >>FONT-
    <i class="fa fa-font" style="font-size:13px; height:27px;width:27px;margin-top:2px; display:flex; align-items:center; justify-content:center;margin-right:5px;cursor: pointer;border-radius:100px;color:white;border:2px solid black;background: #3b5998;box-shadow:  5px 5px 10px #18243d,-5px -5px 10px #5e8ef3;">-</i>
  </li>
<li class="facebook"id="eclipse"style="background:#3b5998;">
    >>LIGHT
    <i class="fa fa-sun" style="font-size:13px; height:27px;width:27px;margin-top:2px; display:flex; align-items:center; justify-content:center;margin-right:5px;cursor: pointer;border-radius:100px;color:red;border:2px solid black;background:#fff;box-shadow:  5px 5px 10px #18243d,-5px -5px 10px #5e8ef3;"></i>
  </li>
<li class="facebook"id="midnight"style="background:#3b5998;">
    >>DARK
    <i class="fa fa-moon" style="font-size:13px; height:27px;width:27px;margin-top:2px; display:flex; align-items:center; justify-content:center;margin-right:5px;cursor: pointer;border-radius:100px;color:white;border:2px solid black;background:#1b2838;;box-shadow:  5px 5px 10px #18243d,-5px -5px 10px #5e8ef3;"></i>
  </li>
<li class="facebook"id="resetBtn"style="background:#3b5998;">
    >>RESET
    <i class="fa fa-refresh" style="font-size:13px; height:27px;width:27px;margin-top:2px; display:flex; align-items:center; justify-content:center;margin-right:5px;cursor: pointer;border-radius:100px;color:white;border:2px solid black;background: #f89000;box-shadow:  5px 5px 10px #18243d,-5px -5px 10px #5e8ef3;"></i>
  </li>
<li class="facebook"id="downloadBtn"style="background:#3b5998;">
    >>DOW
    <i class="fa fa-download" style="font-size:13px; height:27px;width:27px;margin-top:2px; display:flex; align-items:center; justify-content:center;margin-right:5px;cursor: pointer;border-radius:100px;color:white;border:2px solid black;background: #3b5998;box-shadow:  5px 5px 10px #18243d,-5px -5px 10px #5e8ef3;"></i>
  </li>
<li class="facebook"id="helpBtn"style="background:#3b5998;">
    >>HELP
    <i class="fa fa-question" style="font-size:13px; height:27px;width:27px;margin-top:2px; display:flex; align-items:center; justify-content:center;margin-right:5px;cursor: pointer;border-radius:100px;color:white;border:2px solid black;background: #52b1b3;box-shadow:  5px 5px 10px #18243d,-5px -5px 10px #5e8ef3;"></i>
  </li>

<li class="facebook"id="fb-button"style="background:#3b5998;">
    >>ADMIN
    <i class="fa fa-user-shield" style="font-size:13px; height:27px;width:27px;margin-top:2px; display:flex; align-items:center; justify-content:center;margin-right:5px;cursor: pointer;border-radius:100px;color:white;border:2px solid black;background: #0088cc;box-shadow:  5px 5px 10px #18243d,-5px -5px 10px #5e8ef3;"></i>

  </li>
<div id="adminmodal" class="modal"style="height:75%;width:40%;margin-top:7%;margin-left:56%;background:white;border-radius:none;justify-content: center; /* Center horizontally */
text-align:center;  background:#fff;color:white;color:">
        <div class="modal-content"style="height:97%;width:95%;margin-top:1%;border-radius:0px;  background:#000;justify-content: center; /* Center horizontally */
text-align:center;color:white;font-size:25px;font-weight:bold;border-radius:50px;">
            <p></p><p></p><p></p>
<span style="color:black;font-size:18px;">.</span><p></p>
<span style="color:grey;font-size:30px;">LonePy Compiler</span><p></p>
<span style="color:black;font-size:18px;">.</span><p></p>
            <span style="color:green;font-size:18px;color:grey;">| Design & Development |</span><p></p>
<span style="color:green;font-size:18px;color:grey;">| Lone A Firdous |</span><p></p>
            <span style="color:green;font-size:16px;color:grey;"> |  Course Editors  |</span><p></p>
 <span style="color:green;font-size:16px;color:grey;"> | Youssef Yasser Kusibati |  Abdulrahman Mohammed A Aljohani   |</span><p></p>

            <span style="color:green;font-size:15px;color:grey;">| Feedback | Suggestions | Improvements |</span><p></p>
<span style="color:green;font-size:15px;color:grey;">| Email | @ | lonevlabs@gmail.com |</span><p></p>
        </div>
    </div>
    
    <script>
        document.getElementById("fb-button").addEventListener("click", function() {
            document.getElementById("adminmodal").style.display = "block";
        });
        
        function closeModal() {
            document.getElementById("adminmodal").style.display = "none";
        }
        
        window.onclick = function(event) {
            var modal = document.getElementById("adminmodal");
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }
    </script>

<li class="facebook"id="exit"style="background:#3b5998;">
    >EXIT
    <i class="fa fa-sign-out" style="font-size:13px; height:27px;width:27px;margin-top:2px; display:flex; align-items:center; justify-content:center;margin-right:5px;cursor: pointer;border-radius:100px;color:white;border:2px solid black;background: red;box-shadow:  5px 5px 10px #18243d,-5px -5px 10px #5e8ef3;"></i>
  </li> 

</div>

<div class="prevent-select">
<div class="button-container">  
</div>
</div>   
    <textarea id="paragraphInput" style="display:none; " placeholder="Enter your paragraph here..."></textarea>
     <div id="keywords"style="display:none;"></div>
    <!-- Modal -->
<div id="sketchModal" class="modal" style="margin-left:0%;width:100%;height:100%;margin-top:0%;border-radius:0px;background-color: #0F192A;position:fixed;z-index: 10000;">
  <div class="modal-content">
<button id="button"style="width:100%;position: fixed;top:5px;left:0px;font-size: 20px;font-weight: bold;color:red;background:transparent;">LonePy Python Tutor
    <span class="close" onclick="reloadPage()">&times;</span></button>
    <canvas id="sketchpad" width="1300" height="6790" style="overflow-y:auto;border-radius:0px;width:99%;border-left:0px solid white;background-color: #0F192A;margin-top:2%;">
     
    </canvas>
 <div id="modalKeywords"></div>
  </div>
</div>
  <textarea id="pythonCode"style="display:none;" placeholder="Enter Python code here..." rows="10" cols="50"></textarea>
   
    
    <!-- Modal Structure -->
    <div id="modal">
        <div id="modalContent">
<button id="button"style="width:100%;position: fixed;top:5px;left:0px;font-size: 20px;font-weight: bold;color:black;background:transparent;">LonePy Python Tutor

            <span class="closes" onclick="closeModal1()">&times;</span>
            <div id="flowchartContainer"></div>
<div id="flowchartWrapper" style="transform: scale(1); transform-origin: center; transition: transform 0.2s;">
        </div>
    </div>
 </div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  var generateKeywordsButton = document.getElementById('generateKeywordsButton');
  var paragraphInput = document.getElementById('paragraphInput');
  
  var modal = document.getElementById('sketchModal');
  var mainCanvas = document.getElementById('sketchpad');
 var closingmodal = document.querySelector('.modal .close').addEventListener('click', closeModal);
  var ctx = mainCanvas.getContext('2d');
  var pencilImg = new Image();
 let endX = 0;
let endY = 0;
 pencilImg.src = 'm3.png'; // Pencil image URL

  var offScreenCanvas = document.createElement('canvas');
  offScreenCanvas.width = mainCanvas.width;
  offScreenCanvas.height = mainCanvas.height;
  var offScreenCtx = offScreenCanvas.getContext('2d');

  pencilImg.onload = function() {
    ctx.drawImage(pencilImg, 0, 0, 0, 90); // Draw the blue pencil cursor initially
  };

  let keywordsWithSentences = []; // Store extracted keywords and sentences
  let currentIndex = 0; // Track the current index of displayed keyword
  let pencilDrawn = false; // Track if pencil is drawn


// Initialize speech synthesis
const synth = window.speechSynthesis;
let utterance;

// Function to speak text
function speakText(text, callback) {
  const utterance = new SpeechSynthesisUtterance(text);
  utterance.rate = 2.0; // Reduce speed by setting a lower rate
  utterance.onend = callback;
  window.speechSynthesis.speak(utterance);
}
 function sketchAndAnimate() {
  if (!pencilDrawn) {
    ctx.drawImage(pencilImg, 0, 0, 0, 90); // Draw the blue pencil cursor initially
    pencilDrawn = true;
  }

  ctx.font = '30px "Indie Flower", cursive'; // Font size and style
  ctx.fillStyle = '#fff'; // Blue font color

  // Calculate starting position for current keyword
  let startX = 20; // 10% from the left
  let startY = 100 + currentIndex * 150; // Increase gap to 120 pixels between rows
// Speak the current keyword and sentence
  let keyword = keywordsWithSentences[currentIndex].keyword;
  let sentence = keywordsWithSentences[currentIndex].sentence;
  speakText(`${keyword}. ${sentence}`);

  // Start pencil animation from the specified coordinates
  animatePencilAndLine(keywordsWithSentences[currentIndex].keyword, 0, startX, startY, function() {
    // After keyword animation, animate the line
    animateLine(startX + ctx.measureText(keywordsWithSentences[currentIndex].keyword).width, startY, startX + 2, startY, function() {
      // After line animation, animate the sentence
      animateSentence(keywordsWithSentences[currentIndex].sentence, startX + ctx.measureText(keywordsWithSentences[currentIndex].keyword).width, startY, function() {
        // After sentence animation, draw connecting lines
        drawConnectingLines(startX + ctx.measureText(keywordsWithSentences[currentIndex].keyword).width + ctx.measureText(keywordsWithSentences[currentIndex].sentence).width, startY);
      });
    });
  });
}

function animatePencilAndLine(keyword, index, startX, startY, callback) {
  if (index <= keyword.length) {
    // Clear the entire canvas before each animation step
    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

    // Redraw previously drawn keywords
    ctx.drawImage(offScreenCanvas, 0, 0);

    ctx.font = '30px "Indie Flower", cursive'; // Font size and style
    ctx.fillStyle = '#0F192A'; // Blue font color

    // Write text up to the current index
    let textToShow = keyword.substring(0, index);
    ctx.fillText(textToShow, startX, startY);

    // Calculate pencil position with sine wave (optional animation)
    let amplitude = 0; // Amplitude of the sine wave
    let frequency = 0; // Frequency of the sine wave
    let y = startY - 50 + Math.sin(index * frequency * 0) * amplitude;

    // Draw the blue pencil image at the calculated position
    ctx.drawImage(pencilImg, startX + ctx.measureText(textToShow).width, y, 90, 90);

    setTimeout(function() {
      animatePencilAndLine(keyword, index + 1, startX, startY, callback);
    }, 10); // Faster animation: 100ms per letter
  } else {
    // Draw the completed keyword on the off-screen canvas
    offScreenCtx.font = '30px "Indie Flower", cursive'; // Font size and style
    offScreenCtx.fillStyle = '#0F192A'; // Blue font color
    offScreenCtx.fillText(keyword, startX, startY);

    // Draw a cloud-like border around the text
    sketchCloudBorder(offScreenCtx, startX, startY, keyword);

    // Redraw the main canvas with updated off-screen canvas
    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    ctx.drawImage(offScreenCanvas, 0, 0);

    // Redraw the pencil tool at the end point (optional)
    ctx.drawImage(pencilImg, startX + ctx.measureText(keyword).width - 20, startY - 25, 90, 90);

    // Call the callback function after keyword animation is done
    if (callback) {
      callback();
    }
  }
}

function animateLine(startX, startY, endX, endY, callback) {
  let currentX = startX+30;
  let currentY = startY;
  let distance = Math.sqrt(Math.pow(endX - startX, 1.5) + Math.pow(endY - startY, 2));
  let stepX = (endX - startX) / distance;
  let stepY = (endY - startY) / distance;

  function drawLineStep() {
    if (Math.abs(currentX - endX) > Math.abs(stepX) || Math.abs(currentY - endY) > Math.abs(stepY)) {
      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

      // Redraw previously drawn content
      ctx.drawImage(offScreenCanvas, 0, 0);

      ctx.beginPath();
      ctx.moveTo(startX, startY);
      ctx.lineTo(currentX, currentY);
      ctx.strokeStyle = '#ffffff'; // Blue line color
      ctx.lineWidth = 2;
      ctx.stroke();

      // Calculate pencil position with sine wave (optional animation)
      let amplitude = 0; // Amplitude of the sine wave
      let frequency = 0; // Frequency of the sine wave
      let y = currentY - 20 + Math.sin(currentX * frequency * 0.5) * amplitude;

      // Draw the blue pencil image at the calculated position
      ctx.drawImage(pencilImg, currentX, y, 90, 90);

      currentX += stepX;
      currentY += stepY;

      setTimeout(drawLineStep,1); // Faster animation: 10ms per step
    } else {
      // Store the completed line on the off-screen canvas
      offScreenCtx.beginPath();
      offScreenCtx.moveTo(startX, startY);
      offScreenCtx.lineTo(endX, endY);
      offScreenCtx.strokeStyle = '#ffffff'; // Blue line color
      offScreenCtx.lineWidth = 2;
      offScreenCtx.stroke();

      // Call the callback function after line animation is done
      if (callback) {
        callback();
      }
    }
  }

  drawLineStep();
}

function animateSentence(sentence, startX, startY, callback) {
  let words = sentence.split(' ');
  let currentLine = '';
  let y = startY;
  let wordIndex = 0;
  let charIndex = 0;
  let amplitude = 12; // Amplitude of the sine wave
  let frequency = 2; // Frequency of the sine wave
  let waveOffset = 0; // Offset for sine wave animation
  let endX, endY; // Variables to store the end position of the sentence

  // Set the font style and increase visibility
  ctx.font = '30px "Indie Flower", cursive';
  ctx.fillStyle = 'yellow';
  ctx.lineWidth = 1;

  offScreenCtx.font = '30px "Indie Flower", cursive';
  offScreenCtx.fillStyle = 'white';
  offScreenCtx.lineWidth = 1;

  function drawNextCharacter() {
    if (wordIndex < words.length) {
      if (currentLine.split(' ').length < 10 && charIndex < words[wordIndex].length) {
        let char = words[wordIndex][charIndex];
        currentLine += char;

        // Draw current state of the sentence
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        ctx.drawImage(offScreenCanvas, 0, 0);
        ctx.fillText(currentLine, startX, y);

        // Apply sine wave to the pencil tool position
        let pencilX = startX + ctx.measureText(currentLine).width - 10;
        let waveY = y - 40 + Math.sin(waveOffset) * amplitude;
        ctx.drawImage(pencilImg, pencilX, waveY, 90, 90);

        charIndex++;
        waveOffset += frequency; // Update the wave offset
        setTimeout(drawNextCharacter, 50); // Adjust delay for animation speed
      } else {
        // If the line has fewer than 8 words and the current word is complete
        if (charIndex === words[wordIndex].length) {
          currentLine += ' ';
          charIndex = 0;
          wordIndex++;
        }

        // If the line has 8 words or more, draw it on the off-screen canvas and reset
        if (currentLine.split(' ').length >= 10 || wordIndex >= words.length) {
          offScreenCtx.fillText(currentLine, startX, y);
          endX = startX + ctx.measureText(currentLine).width; // Store endX
          endY = y; // Store endY
          currentLine = '';
          y += 45; // Move to the next line
          waveOffset = 0; // Reset wave offset for the new line
        }

        setTimeout(drawNextCharacter, 1);
      }
    } else {
      // Draw the remaining line if there are words left
      if (currentLine) {
        offScreenCtx.fillText(currentLine, startX, y);
        endX = startX + ctx.measureText(currentLine).width; // Update endX
        endY = y; // Update endY
      }

      // Redraw the main canvas with updated off-screen canvas
      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
      ctx.drawImage(offScreenCanvas, 0, 0);

      // Draw the vertical and horizontal connecting lines
      drawConnectingLines(endX, endY, function() {
        // Proceed to the next keyword only after the connecting lines are drawn
        setTimeout(displayNextKeyword, 1000); // Adjust delay as needed
      });
    }
  }

  drawNextCharacter();
}

function drawConnectingLines(startX, startY) {
  let nextKeyword = keywordsWithSentences[currentIndex + 1];
  let nextKeywordStartX = mainCanvas.width / 2 - (ctx.measureText(nextKeyword.keyword).width + ctx.measureText(nextKeyword.sentence).width + 250) / 2;
  
  // Ensure endX does not go beyond x: 200
  let endX = Math.max(nextKeywordStartX + 20, 140); // Ensure the line stops at least at x = 200

  // Draw a vertical line downwards from the bottom center of the current sentence
  animateLineWithSine(startX, startY, startX, startY, function() {
    // Draw a horizontal line towards the left to the end of the line
    animateLineWithSine(startX, startY+7, endX, startY + 7, function() {
      // Draw a vertical line downwards from the end of the horizontal line
      animateLineWithSine(endX, startY, endX, startY, function() {
        // Call the function to draw the next keyword
        if (typeof displayNextKeyword === 'function') {
          displayNextKeyword(); // Ensure this function exists and is correctly defined
        }
      });
    });
  });
}

function animateLineWithSine(startX, startY, endX, endY, callback) {
  let currentX = startX;
  let currentY = startY;
  let distance = Math.sqrt(Math.pow(endX - startX, 2) + Math.pow(endY - startY, 2));
  let stepX = (endX - startX) / distance;
  let stepY = (endY - startY) / distance;

  // Increase the step size for faster drawing
  let stepSize = 2; // Adjust this value for faster/slower drawing
  let speed = 1; // Adjust this value for the speed of animation

  function drawLineStep() {
    if (Math.abs(currentX - endX) > Math.abs(stepX) || Math.abs(currentY - endY) > Math.abs(stepY)) {
      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

      // Redraw previously drawn content
      ctx.drawImage(offScreenCanvas, 0, 0);

      ctx.beginPath();
      ctx.moveTo(startX, startY);
      ctx.lineTo(currentX, currentY);
      ctx.strokeStyle = '#ffffff'; // Blue line color
      ctx.lineWidth = 2;
      ctx.stroke();

      // Calculate pencil position with sine wave
      let amplitude = 0; // Amplitude of the sine wave
      let frequency = 0; // Frequency of the sine wave
      let y = currentY - 35 + Math.sin(currentX * frequency * 0.05) * amplitude;

      // Draw the blue pencil image at the calculated position
      ctx.drawImage(pencilImg, currentX-8, y, 90, 90);

      // Move the current position based on the step size
      currentX += stepX * stepSize;
      currentY += stepY * stepSize;

      setTimeout(drawLineStep, speed); // Faster animation: shorter timeout
    } else {
      // Store the completed line on the off-screen canvas
      offScreenCtx.beginPath();
      offScreenCtx.moveTo(startX, startY);
      offScreenCtx.lineTo(endX, endY);
      offScreenCtx.strokeStyle = '#ffffff'; // Blue line color
      offScreenCtx.lineWidth = 2;
      offScreenCtx.stroke();

      // Call the callback function after line animation is done
      if (callback) {
        callback();
      }
    }
  }

  drawLineStep();
}


  function sketchCloudBorder(context, startX, startY, text) {
    // Define parameters for the cloud border
    const cloudOffset = 5; // Offset from the text to the cloud border

    // Calculate text width and height
    const textWidth = 0;
    const textHeight = 0; // Approximate height of the text

    // Define bounding box around the text
    const boxWidth = textWidth + 2 * cloudOffset;
    const boxHeight = textHeight + 2 * cloudOffset;
    const boxStartX = startX - boxWidth / 2;
    const boxStartY = startY - textHeight / 2 - cloudOffset;

    // Draw the cloud-like border using an ellipse
    context.strokeStyle = '#fff'; // Blue border color
    context.lineWidth = 2;
    context.fillStyle = 'rgba(0, 0, 0, 0)'; // Light blue color for the cloud effect

    context.beginPath();
    context.ellipse(
      boxStartX + boxWidth - 8, // Center X
      boxStartY + boxHeight / 2.5, // Center Y
      boxWidth / 2, // X radius
      boxHeight / 2, // Y radius
      0, // Rotation
      0, // Start angle
      4 * Math.PI // End angle
    );
    context.fill(); // Fill the cloud effect
    context.stroke(); // Outline the cloud effect

  }



  function displayNextKeyword() {
    currentIndex++;
    if (currentIndex < keywordsWithSentences.length) {
      sketchAndAnimate(); // Sketch and animate the next keyword
    }
  }

  generateKeywordsButton.addEventListener('click', function() {
// Request full-screen mode
  if (document.documentElement.requestFullscreen) {
    document.documentElement.requestFullscreen();
  } else if (document.documentElement.mozRequestFullScreen) { // Firefox
    document.documentElement.mozRequestFullScreen();
  } else if (document.documentElement.webkitRequestFullscreen) { // Chrome, Safari, Opera
    document.documentElement.webkitRequestFullscreen();
  } else if (document.documentElement.msRequestFullscreen) { // IE/Edge
    document.documentElement.msRequestFullscreen();
  }
  var paragraph = paragraphInput.value.trim().replace(/\n+/g, ' ');


  keywordsWithSentences = extractKeywords(paragraph);

  if (keywordsWithSentences.length > 0) {
    currentIndex = 0; // Reset current index
    // Open the modal
    modal.style.display = "block";
    // Sketch and animate the first keyword
    sketchAndAnimate();
  } else {
    alert('Run The Code First');
  }
});
  function extractKeywords(text) {
    const doc = nlp(text);
    const sentences = doc.sentences().out('array');
    let uniqueKeywords = new Set();
    let keywordsWithSentences = [];

    sentences.forEach(sentence => {
      let nouns = nlp(sentence).nouns().out('array');

      // Ensure only one unique keyword is extracted per sentence
      let foundKeyword = false;
      nouns.forEach(noun => {
        let normalizedKeyword = noun.replace(/[.,\-]/g, '').toLowerCase().trim();
        if (!foundKeyword && normalizedKeyword !== '') {
          if (!uniqueKeywords.has(normalizedKeyword)) {
            uniqueKeywords.add(normalizedKeyword);
            keywordsWithSentences.push({
              keyword: normalizedKeyword,
              sentence: sentence
            });
            foundKeyword = true; // Mark as found to skip further keywords in this sentence
          }
        }
      });
    });

    return keywordsWithSentences;

  }
});
</script>
<script>
  function closeModal() {
    console.log('closeModal function called');
    var modal = document.getElementById('sketchModal');
    console.log('Modal element:', modal);
     
    if (modal) {
      modal.style.display = "none";
      console.log('Modal hidden');
    } else {
      console.error('Modal not found');
    }

    
  }
</script>
<script src="https://unpkg.com/mermaid@8.13.6/dist/mermaid.min.js"></script>

<script>

    // Function to handle conversion from Python code to flowchart
    function convertToFlowchart() {
    // Request fullscreen
    if (document.documentElement.requestFullscreen) {
        document.documentElement.requestFullscreen();
    } else if (document.documentElement.mozRequestFullScreen) { // Firefox
        document.documentElement.mozRequestFullScreen();
    } else if (document.documentElement.webkitRequestFullscreen) { // Chrome, Safari, and Opera
        document.documentElement.webkitRequestFullscreen();
    } else if (document.documentElement.msRequestFullscreen) { // IE/Edge
        document.documentElement.msRequestFullscreen();
    }
        const pythonCode = editor.getValue();
        // Get the content from CodeMirror editor
  
     

        let lines = pythonCode.split('\n').filter(line => line.trim() !== '');
        let flowchartCode = 'graph RL;\n';
        flowchartCode += '    Start([Start])\n';
        let previousNode = 'Start';
        let previousLabel = 'Start';

        let shapeCounter = 1;
        let direction = 'right';
        let nodeInRow = 0;

        lines.forEach((line) => {
            if (line.trim().startsWith('#')) return;

            let cleanLine = line.trim().replace(/[^a-zA-Z0-9\s><=!+*/%&|^~()]/g, '');
            let currentNode;
            let currentLabel = `Label${shapeCounter}`;

            if (line.includes('import ')) {
                currentNode = `Process${shapeCounter}`;
                flowchartCode += `    ${currentNode}([Import Lib])\n`;
                flowchartCode += `    ${currentLabel}["${shapeCounter}. ${cleanLine}"] --> ${currentNode}\n`;
            } else if (line.includes('if') || line.includes('elif') || line.includes('else')) {
                currentNode = `Decision${shapeCounter}`;
                flowchartCode += `    ${currentNode}{Decision}\n`;
                flowchartCode += `    ${currentLabel}["${shapeCounter}. ${cleanLine}"] --> ${currentNode}\n`;
            } else if (line.includes('for') || line.includes('while')) {
                currentNode = `Process${shapeCounter}`;
                flowchartCode += `    ${currentNode}([Loop])\n`;
                flowchartCode += `    ${currentLabel}["${shapeCounter}. ${cleanLine}"] --> ${currentNode}\n`;
            } else if (line.includes('input(')) {
                currentNode = `Input${shapeCounter}`;
                flowchartCode += `    ${currentNode}[/Input/]\n`;
                flowchartCode += `    ${currentLabel}["${shapeCounter}. ${cleanLine}"] --> ${currentNode}\n`;
            } else if (line.includes('print(')) {
                currentNode = `Output${shapeCounter}`;
                flowchartCode += `    ${currentNode}[/Output/]\n`;
                flowchartCode += `    ${currentLabel}["${shapeCounter}. ${cleanLine}"] --> ${currentNode}\n`;
            } else if (line.includes('def ')) {
                currentNode = `Process${shapeCounter}`;
                flowchartCode += `    ${currentNode}([Function])\n`;
                flowchartCode += `    ${currentLabel}["${shapeCounter}. ${cleanLine}"] --> ${currentNode}\n`;
            } else {
                currentNode = `Process${shapeCounter}`;
                flowchartCode += `    ${currentNode}([Process])\n`;
                flowchartCode += `    ${currentLabel}["${shapeCounter}. ${cleanLine}"] --> ${currentNode}\n`;
            }

            if (currentLabel) {
                if (direction === 'LR') {
                    flowchartCode += `    ${previousLabel} --- ${currentLabel}:::redLine\n`;
                } else {
                    flowchartCode += `    ${currentLabel} --- ${previousLabel}:::redLine\n`;
                }
                previousLabel = currentLabel;
                nodeInRow++;

                if (nodeInRow === 4) {
                    nodeInRow = 0;
                    direction = direction === 'LR' ? 'RL' : 'LR'; // Toggle direction
                }
            }

            shapeCounter++;
        });

        flowchartCode += '    End([End])\n';
        flowchartCode += `    ${previousLabel} --> End:::redLine\n`;

        flowchartCode += '    classDef darkRed fill:#8B0000,color:#fff;\n';
        flowchartCode += '    class Start,End darkRed;\n';
        for (let i = 1; i < shapeCounter; i++) {
            flowchartCode += `    class Label${i} darkRed;\n`;
        }
        flowchartCode += '    classDef redLine stroke:red,stroke-width:1px;\n';

        // Log flowchart code for debugging
        console.log(flowchartCode);

        document.getElementById('flowchartContainer').innerHTML = `<div class="mermaid">${flowchartCode}</div>`;

        // Show the modal
        document.getElementById('modal').style.display = 'block';

        // Initialize Mermaid after the modal is shown
        mermaid.init();
    }

    // Function to close the modal
    function closeModal1() {
        document.getElementById('modal').style.display = 'none';
    }

    // Zoom in/out on mouse scroll
    let scale = 1; // Initial scale
    const zoomStep = 0.1; // Scale increment/decrement per scroll
    const minScale = 0.5; // Minimum zoom level
    const maxScale = 2; // Maximum zoom level

    // Add event listener for zooming on scroll
    const flowchartContainer = document.getElementById('flowchartContainer');

    flowchartContainer.addEventListener('wheel', (event) => {
        event.preventDefault(); // Prevent the default scroll behavior
        if (event.deltaY < 0) {
            scale = Math.min(scale + zoomStep, maxScale); // Zoom in
        } else {
            scale = Math.max(scale - zoomStep, minScale); // Zoom out
        }
        flowchartContainer.style.transform = `scale(${scale})`; // Apply zoom
        flowchartContainer.style.transformOrigin = 'center'; // Keep zoom centered
    });

    // Dragging functionality for flowchart inside window
    let isDragging = false;
    let startX, startY;
    let offsetX = 0, offsetY = 0; // Track the current offset

    // Mouse down event to start dragging
    flowchartContainer.addEventListener('mousedown', (event) => {
        isDragging = true;
        startX = event.clientX;
        startY = event.clientY;
        flowchartContainer.style.cursor = 'grabbing'; // Change cursor to grabbing
    });

    // Mouse move event to drag the flowchart
    flowchartContainer.addEventListener('mousemove', (event) => {
        if (!isDragging) return;

        const deltaX = event.clientX - startX;
        const deltaY = event.clientY - startY;

        offsetX += deltaX;
        offsetY += deltaY;

        // Move the flowchart based on the mouse movement
        flowchartContainer.style.transform = `scale(${scale}) translate(${offsetX}px, ${offsetY}px)`;
        startX = event.clientX; // Update start position for the next move
        startY = event.clientY;
    });

    // Mouse up event to stop dragging
    flowchartContainer.addEventListener('mouseup', () => {
        isDragging = false;
        flowchartContainer.style.cursor = 'grab'; // Change cursor back to grab
    });

    // Mouse leave event to stop dragging if mouse leaves the container
    flowchartContainer.addEventListener('mouseleave', () => {
        isDragging = false;
        flowchartContainer.style.cursor = 'grab'; // Change cursor back to grab
    });
</script>



  <div id="IDE"style="margin-top:6px;margin-left:65px;width:96%;">
   <div id="codeSection" style="background:#3b5998;color: #D1EDFF;border:1px solid black;border-radius:0px;width:99%;height:calc(96vh);">

  <div id="codeEditor" style="background-color: rgb(15, 25, 42);margin-top:10px;">
  <div id="tablesplit" style="display:table; table-layout: fixed; width: 100%;height:100%;">
<div class="tabbox" id="tab" style="display:table-row;">
<nav class="nav">
<ul>

	<li class="selected" id="firstTab"style="display: flex; justify-content: center; align-items: center; height: 30px;width:110px;background:red; border: 1px solid black;margin-top:11px;"><span>main.py</span>
</li>	
</ul>
</nav>
</div>
<div class="tabCon" style="display:table-row;">
<section class="selected">
  <textarea id="code"style="white-space: pre-wrap;
    font-family: monospace; /">
print('hello')
</textarea>
</div>
</div>  
</div>  

<div id="splitbar"></div>

<div id="preview" class="midnight"style="padding:20px;min-width:47%;max-width:47%;margin-top:10px;">

  <div id="codeCanvas" style="display: none;">

	<div id="mycanvas" height="400" width="100%"></div>

  </div>

<div style="display: flex; justify-content: center; align-items: center; height: 30px;width:330px;background:transparent; border-bottom: 1px solid black;margin-top:-8px;border-top-left-radius:10px;border-top-right-radius:10px;margin-left:1%;align-items:left; justify-content:left;color:white"> 

<i class="fa fa-book-open" id="generateKeywordsButton" style="font-size:25px; height:27px;width:27px;margin-top:2px; display:flex; align-items:center; justify-content:center;margin-right:5px;cursor: pointer; border-radius:100px;color:white;border:2px solid black;background: red;pointerEvents = "none"></i>
Lecture Mode

<i class="fa fa-book-open" id="generateflowgraph" 
   style="font-size:25px; height:27px; width:27px; margin-top:2px; display:flex; 
   align-items:center; justify-content:center; margin-right:5px; cursor:pointer; 
   border-radius:100px; color:white; border:2px solid black; margin-left:10%; 
   background: red;">
</i>Generate Flowchart

<script>
document.getElementById("generateflowgraph").addEventListener("click", function() {
    if (window.getComputedStyle(this).backgroundColor === "rgb(255, 0, 0)") {
        alert("Run The Code first!");
    } else {
        convertToFlowchart();
    }
});
</script>

</div>

  <div id="codeOutput">

	<pre id="edoutput">
 <span style="color:grey;font-size:15px;">LonePy Compiler</span>
 <span style="color:green;font-size:11px;color:grey;">| Design & Development | Lone A Firdous |</span>
 <span style="color:green;font-size:11px;color:grey;">| Course Editors | Youssef Yasser Kusibati | Abdulrahman Mohammed A Aljohani |</span>
 <span style="color:green;font-size:11px;color:grey;">| Feedback | Suggestions | Improvements | @ | lonevlabs@gmail.com |
</span>
</pre>

	<div id="inputs">
		<div id="inputPrompt" style="display: none;"><div id="inputMsg"></div><span id="programInputField" contenteditable=""></span><span class="material-symbols-outlined" id="submitInput">
task_alt
</span></div>
	</div>
	<div id="error"></div>

 
 

  </div>

  </div>

</div>

  </div>  
<div id="footer" style="background:#000;color:red;position:fixed;bottom:0;width:100%;text-align:left;">
    <span style="color:#777;">| Python Compiler | Design & Development | Lone A Firdous |</span>
    <span style="color:#777;margin-left:30%;"> | Course Editors | Youssef Yasser Kusibati | Abdulrahman Mohammed A Aljohani |</span>
</div>

</div>
<script>
// Button click event to explain and generate test results
document.getElementById('copyButton').addEventListener('click', () => {
    
    // Get the content from CodeMirror editor
    const codeContent = editor.getValue();
    
if (!codeContent.trim()) {
    alert('No code found to process.');
    return;
} else {
    // Enable the button by setting pointerEvents to "auto"
    const button = document.getElementById('generateKeywordsButton');
    button.style.pointerEvents = "auto";
    button.style.cursor = "pointer"; // Change cursor to hand symbol
    button.style.backgroundColor = "green"; // Change button background color to green
 const button1 = document.getElementById('generateflowgraph');
    button1.style.pointerEvents = "auto";
    button1.style.cursor = "pointer"; // Change cursor to hand symbol
    button1.style.backgroundColor = "green"; // Change button background color to green

    
}

    // Split code into lines
    const lines = codeContent.split('\n');
    let explanationText = '';
    let testResults = '';

    // Process each line of code for explanation
    lines.forEach((line, index) => {
        const explanation = detailedExplain(line);
        explanationText += `Line ${index + 1}: ${line}\n${explanation}\n\n`;
    });

    // Generate test results or scenarios
    testResults = generateTestResults(codeContent);

    // Paste the explained steps and test results into the <pre> elements
    document.getElementById('paragraphInput').textContent = explanationText;
    document.getElementById('testResults').textContent = testResults;

    // Optional: Log for debugging
    console.log("Explained Content:", explanationText);
    console.log("Test Results:", testResults);
});

// Enhanced explanation logic
function detailedExplain(line) {
    const trimmedLine = line.trim();

    if (trimmedLine === '') return 'This line is empty.';
    if (trimmedLine.startsWith('#')) return 'This is a comment.';

    const assignmentRegex = /^([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*(.+)$/;
    if (assignmentRegex.test(trimmedLine)) {
        const [, variable, value] = assignmentRegex.exec(trimmedLine);
        if (isMathExpression(value)) {
            const mathExplanation = explainMathExpression(value);
            return `Assigns the result of the mathematical expression '${value}' to the variable '${variable}'.\n${mathExplanation}`;
        }
        return `Assigns the value '${value}' to the variable '${variable}'.`;
    }

    const functionRegex = /^def\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*\((.*?)\):/;
    if (functionRegex.test(trimmedLine)) {
        const [, functionName, params] = functionRegex.exec(trimmedLine);
        return `Defines a function named '${functionName}' with parameters: ${params || 'none'}.`;
    }

    const whileRegex = /^while\s+(.*?):/;
    if (whileRegex.test(trimmedLine)) {
        const [, condition] = whileRegex.exec(trimmedLine);
        return `This is a while loop. It continues as long as the condition '${condition}' evaluates to true.`;
    }

    const ifRegex = /^if\s+(.*?):/;
    if (ifRegex.test(trimmedLine)) {
        const [, condition] = ifRegex.exec(trimmedLine);
        return `This is an if statement. It checks if the condition '${condition}' evaluates to true.`;
    }

    const elifRegex = /^elif\s+(.*?):/;
    if (elifRegex.test(trimmedLine)) {
        const [, condition] = elifRegex.exec(trimmedLine);
        return `This is an elif statement. It checks if the condition '${condition}' is true if previous conditions were false.`;
    }

    if (trimmedLine === 'else:') {
        return 'This is an else statement. It runs if all previous conditions are false.';
    }

    const printRegex = /^print\s*\((.*?)\)/;
    if (printRegex.test(trimmedLine)) {
        const [, content] = printRegex.exec(trimmedLine);
        return `This prints '${content}' to the console.`;
    }

    const returnRegex = /^return\s+(.*)$/;
    if (returnRegex.test(trimmedLine)) {
        const [, returnValue] = returnRegex.exec(trimmedLine);
        return `This returns the value '${returnValue}' from the function.`;
    }

    // Catch-all for unrecognized lines
    return 'This is a Python statement, but it does not match any specific known pattern.';
}

// Helper function to check if a string is a mathematical or logical expression
function isMathExpression(value) {
    const operatorRegex = /[+\-*/%**//]|[=<>!&|^~:]/; // Matches arithmetic, logical, comparison, and bitwise operators
    return operatorRegex.test(value);
}

// Helper function to explain mathematical/logical expressions
function explainMathExpression(expression) {
    const operators = {
        '+': 'Addition (adds two numbers or variables)',
        '-': 'Subtraction (subtracts the second number from the first)',
        '*': 'Multiplication (multiplies two numbers)',
        '/': 'Division (divides the first number by the second)',
        '%': 'Modulus (returns the remainder of division)',
        '**': 'Exponentiation (raises the first number to the power of the second)',
        '//': 'Floor division (divides and returns the largest integer result)',
        '==': 'Equal (checks if two values are equal)',
        '!=': 'Not equal (checks if two values are not equal)',
        '>': 'Greater than (checks if the first value is greater)',
        '<': 'Less than (checks if the first value is smaller)',
        '>=': 'Greater than or equal to',
        '<=': 'Less than or equal to',
        'and': 'Logical AND (returns True if both conditions are true)',
        'or': 'Logical OR (returns True if at least one condition is true)',
        'not': 'Logical NOT (reverses the condition)',
        '&': 'Bitwise AND (compares each bit and returns 1 if both bits are 1)',
        '|': 'Bitwise OR (compares each bit and returns 1 if either bit is 1)',
        '^': 'Bitwise XOR (returns 1 if the bits are different)',
        '~': 'Bitwise NOT (inverts the bits)',
        '<<': 'Left shift (shifts the bits to the left)',
        '>>': 'Right shift (shifts the bits to the right)',
        '=': 'Assignment operator (assigns a value to a variable)'
    };

    let explanation = 'Mathematical Expression Analysis:\n';
    const tokens = expression.split(/([\+\-\*\/\%\*\*\/\/]|[=<>!&|^~:])/).filter(Boolean); // Split by operators
    tokens.forEach((token) => {
        if (operators[token.trim()]) {
            explanation += `Operator '${token.trim()}' performs ${operators[token.trim()]}.\n`;
        } else if (!isNaN(token.trim())) {
            explanation += `Operand '${token.trim()}' is a number.\n`;
        } else {
            explanation += `Operand '${token.trim()}' is treated as a variable.\n`;
        }
    });

    return explanation;
}

// Generate test results or scenarios based on the code content
function generateTestResults(codeContent) {
    let result = 'Test Scenarios and Expected Results:\n';

    // Example 1: Detect print statements and provide simulated outputs
    const printRegex = /^print\s*\((.*?)\)/gm;
    const printMatches = [...codeContent.matchAll(printRegex)];
    if (printMatches.length) {
        result += 'Detected print statements:\n';
        printMatches.forEach((match, index) => {
            result += `Test Case ${index + 1}: The output will be '${match[1]}'.\n`;
        });
    }

    return result;
}
</script>



  
  
<button class="side-panel-toggle prevent-select" type="button"style=" background:#000;">
<span class="material-symbols-outlined sp-icon-open"style="color:red;margin-top:85%;">
<div class="rotate-text-left">OPEN PYTHON TUTORIAL</div>
</span>
<span class="material-symbols-outlined sp-icon-close"style="color:red;font-size:20px;">
>>
</span>
</button>
<div class="side-panel">
<div id="help"style="overflow-y:hidden;scrollbar-width:none;"> <div id="topbar" class="prevent-select"style="overflow-y:hidden;scrollbar-width:none;border-radius:0px;background: #0F192A;">
 <img src="./mycompiler/python-101.png" width="17" align="absmiddle">..PYTHON TUTORIAL:BASICS
</div>

<div style="overflow-y:auto;scrollbar-width:none;height: 536px;">
 <ul id="accordion" class="accordion">

  <li>
    <div class="link"><span class="material-symbols-outlined">

</span>Python Intro<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>

    <ul class="submenu">
 <li><span style="color:#5e5a5a;font-size: 13px;text-align:center;">Python is one of the most widely used pro
gramming languages nowadays. Despite being a general-purpose language, its applications span a wide range, including web development, IoT, machine learning, and artificial intelligence.

This Python tutorial is to assist the basic programmers in understanding the fundamentals to more complex ideas of the Python programming language. Upon finishing this training, you will have a great deal of proficiency with Python, which will allow you to advance and become a highly skilled software engineer.

   <li><span style="color:white;font-size: 12px;font-weight: bold;">* What is Python? *</span></li>
<li><span style="color:#5e5a5a;font-size: 13px;text-align:center;">Python is a widely used high-level, object-oriented, interpreted, general-purpose computer language. Python is a garbage-collected programming language with dynamic typing. Guido van Rossum designed it between 1985 and 1990. The GNU General Public License (GPL) is used to distribute Python source code, much like it is for Perl.
</span>

<li><span style="color:white;font-size: 12px;font-weight: bold;"> * Python Jobs *</span></li>
<li><span style="color:#5e5a5a;font-size: 13px;text-align:center;">Today, a Python Programmer with 3-5 years of expertise is asking for an annual salary of roughly $150,000, and Python is the most demanding programming language. However, this may vary based on the location of the job. It's impossible to list all of the firms that use Python, but a few big ones are:
Google-Intel-NASA-PayPal-Facebook-IBM-Amazon-Netflix-Pinterest-Uber and many more...
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"> * Why to Learn Python? *</span></li>
<li><span style="color:#5e5a5a;font-size: 13px;text-align:center;"># Python is Open Source which means its available free of 
<li><span style="color:#5e5a5a;font-size: 13px;text-align:center;"># Python is simple and so easy to learn"</li>
<li><span style="color:#5e5a5a;font-size: 13px;text-align:center;"># Python is versatile and can be used to create many different things."</li>
<li><span style="color:#5e5a5a;font-size: 13px;text-align:center;"># Python has powerful development libraries include AI, ML etc."</li>
<li><span style="color:#5e5a5a;font-size: 13px;text-align:center;">#Python is much in demand and ensures high salary"</li>
<li><span style="color:white;font-size: 12px;font-weight: bold;"> * Python Features*</span></li>
<li><span style="color:#5e5a5a;font-size: 13px;text-align:center;"># Python is Interpreted − Python is processed at runtime by the interpreter. You do not need to compile your program before executing it. This is similar to PERL and PHP."</li>
<li><span style="color:#5e5a5a;font-size: 13px;text-align:center;"># Python is Interactive − You can actually sit at a Python prompt and interact with the interpreter directly to write your programs.</li>
<li><span style="color:#5e5a5a;font-size: 13px;text-align:center;"># Python is Object-Oriented − Python supports Object-Oriented style or technique of programming that encapsulates code within objects.</li>
<li><span style="color:#5e5a5a;font-size: 13px;text-align:center;"># Python is a Beginner's Language − Python is a great language for the beginner-level programmers and supports the development of a wide range of applications from simple text processing to WWW browsers to games.</li>
<li><span style="color:white;font-size: 12px;font-weight: bold;"> * My Python Online Compiler *</span></li>
<li><span style="color:#5e5a5a;font-size: 13px;text-align:center;">My Python programming tutorial provides various examples to explain different programming concepts. I have provided Online Python Compiler/Interpreter on the left side of the screen. You can Edit and Execute almost all the 
examples directly from your browser without the need to set up your development environment.</li>

</ul>
  </li>
<li>
    <div class="link"><span class="material-symbols-outlined">

</span>Python Syntax:Print()<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>

    <ul class="submenu">

 <li><span style="color:green;font-size: 11px;font-weight: bold;text-align:center;">The print() function prints the specified message to the screen, or other standard output device. The message can be a string, or any other object, the object will be converted into a string before written to the screen.</span></li>




<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 1:Print a string</span>
<span class="annotate"># Print a string</span>print("Hello, World!")</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 2:Print Multiple Values</span>
<span class="annotate"># Print multiple values</span>print("Hello", "World")</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 3: Print variables</span>
<span class="annotate"># Declare a variable</span>name = "Alice"
<span class="annotate"># Declare another variable</span>age = 25
<span class="annotate"># Print variables</span>print("Name:", name, "Age:", age)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 4: Use f-string</span>
<span class="annotate"># Declare variables</span>name = "Bob"
<span class="annotate"># Declare another variable</span>age = 30
<span class="annotate"># Use f-string to print</span>print("My name is", name, "and I am", age, "years old.")</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 5: Print numbers</span>
<span class="annotate"># Print an integer</span>print(100)
<span class="annotate"># Print a float</span>print(3.14)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 6: Concatenate strings</span>
<span class="annotate"># Declare string variables</span>greeting = "Hello"
<span class="annotate"># Declare another string variable</span>name = "Charlie"
<span class="annotate"># Concatenate and print</span>print(greeting, ",", name, "!")</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 7: Print escape characters</span>
<span class="annotate"># Print with new line</span>print("Hello\nWorld")
<span class="annotate"># Print with tab space</span>print("Hello\tWorld")</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 8: Print a list</span>
<span class="annotate"># Declare a list</span>fruits = ["apple", "banana", "cherry"]
<span class="annotate"># Print the list</span>print(fruits)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 9: Suppress newline in print</span>
<span class="annotate"># Print without new line</span>print("Hello", end=" ")
<span class="annotate"># Continue on the same line</span>print("World")</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 10: Print a formatted float</span>
<span class="annotate"># Print a formatted float with 2 decimal places</span>print("Pi is approximately:", round(3.14159, 2))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 11: Print with padding</span>
<span class="annotate"># Print with padding</span>print("Number:", str(7).zfill(3))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 12: Print left-aligned text</span>
<span class="annotate"># Print left-aligned text</span>print("Hello", " ", "World!")</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 13: Print right-aligned text</span>
<span class="annotate"># Print right-aligned text</span>print(" ", "Hello", "World!")</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 14: Print centered text</span>
<span class="annotate"># Print centered text</span>print(" ", "Hello", "World!")</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 15: Print with string interpolation</span>
<span class="annotate"># String interpolation in print</span>name = "Alice"
<span class="annotate"># Print interpolated string</span>print("Hello", name, "!")</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 16: Print a complex number</span>
<span class="annotate"># Print a complex number</span>print(3 + 5j)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 17: Print boolean expressions</span>
<span class="annotate"># Print a boolean expression</span>print(5 > 3)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 18: Print file content</span>
<span class="annotate"># Print content of a file</span>with open('example.txt', 'r') as file:
<span class="annotate">  </span>  print(file.read())</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 19: Print with a loop</span>
<span class="annotate"># Print numbers using a loop</span>for i in range(5):
<span class="annotate"></span>print(i)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 20: Print exception handling</span>
<span class="annotate"># Print an error message in exception handling</span>try:
<span class="annotate">  </span>  result = 10 / 0
<span class="annotate"></span>except ZeroDivisionError:
<span class="annotate">   </span> print("Error: Division by zero!")</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 21: Print list comprehension</span>
<span class="annotate"># Print list comprehension result</span>numbers = [x**2 for x in range(5)]
<span class="annotate"></span>print(numbers)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 22: Print date and time</span>
<span class="annotate"># Print the current date and time</span>import datetime
<span class="annotate"></span>print(datetime.datetime.now())</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 23: Print memory address of a variable</span>
<span class="annotate"># Print memory address of a variable</span>x = 10
<span class="annotate"></span>print(hex(id(x)))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 24: Print formatted dictionary</span>
<span class="annotate"># Print formatted dictionary</span>my_dict = {"name": "John", "age": 30}
<span class="annotate"></span>print("Name:", my_dict["name"], "Age:", my_dict["age"])</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 25: Print after importing a module</span>
<span class="annotate"># Import math module and print a value</span>import math
<span class="annotate"></span>print(math.pi)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 26: Print bytes</span>
<span class="annotate"># Print a byte object</span>byte_data = b"Hello"
<span class="annotate"></span>print(byte_data)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 27: Print list elements on separate lines</span>
<span class="annotate"># Print each element of a list on a new line</span>fruits = ["apple", "banana", "cherry"]
<span class="annotate"></span>for fruit in fruits:
<span class="annotate"> </span>print(fruit)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 28: Print with keyword arguments</span>
<span class="annotate"># Print using keyword arguments</span>print("Hello", "World", sep="-", end="!")</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 29: Print a tuple</span>
<span class="annotate"># Print a tuple</span>my_tuple = (1, 2, 3)
<span class="annotate"></span>print(my_tuple)</li>

</ul>
</li>
  <li>
    <div class="link"><span class="icon material-symbols-outlined">
</span>Python Syntax:Input()<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu">



<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 1: Text Input</span>
<span class="annotate"># enter a text input</span>text = input("Enter some text: ")
<span class="annotate"># print the entered text</span>print("You entered:", text)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 2: Integer Input</span>
<span class="annotate"># enter an integer input</span>number = int(input("Enter an integer: "))
<span class="annotate"># print the entered number</span>print("The number you entered is:", number)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 3: Float Input</span>
<span class="annotate"># enter a float input</span>decimal = float(input("Enter a decimal number: "))
<span class="annotate"># print the entered float</span>print("The decimal number you entered is:", decimal)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 4: Converting String to Integer</span>
<span class="annotate"># enter a string input</span>string_number = input("Enter a number as a string: ")
<span class="annotate"># convert the string to an integer</span>converted_number = int(string_number)
<span class="annotate"># print the converted integer</span>print("Converted integer:", converted_number)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 5: Arithmetic Operation</span>
<span class="annotate"># input two numbers</span>num1 = int(input("Enter the first number: "))
<span class="annotate"></span>num2 = int(input("Enter the second number: "))
<span class="annotate"># perform addition</span>sum_result = num1 + num2
<span class="annotate"># print the result</span>print("The sum is:", sum_result)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 6: Character Input</span>
<span class="annotate"># enter a single character</span>char = input("Enter a character: ")[0]
<span class="annotate"># print the entered character</span>print("You entered:", char)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 7: Boolean Conversion</span>
<span class="annotate"># enter a value</span>value = input("Enter any value (true/false): ")
<span class="annotate"># convert the value to a boolean</span>boolean_value = bool(value)
<span class="annotate"># print the boolean value</span>print("Boolean conversion result:", boolean_value)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 8: Multiple Inputs in One Line</span>
<span class="annotate"># enter two numbers separated by a space</span>num1, num2 = map(int, input("Enter two numbers separated by space: ").split())
<span class="annotate"># print the entered numbers</span>print("First number:", num1, "Second number:", num2)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 9: Input with a Default Value</span>
<span class="annotate"># input with default value handling</span>name = input("Enter your name (default is 'Guest'): ") or "Guest"
<span class="annotate"># print the name</span>print("Hello,", name, "!")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 10: Input and Type Conversion to List</span>
<span class="annotate"># enter numbers separated by commas</span>numbers = list(map(int, input("Enter numbers separated by commas: ").split(',')))
<span class="annotate"># print the list of numbers</span>print("List of numbers:", numbers)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 11: Checking Input Type</span>
<span class="annotate"># enter any input</span>value = input("Enter any value: ")
<span class="annotate"># print the type of the entered value</span>print("The type of entered value is:", type(value))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 12: Summing Multiple Integer Inputs</span>
<span class="annotate"># input multiple integers separated by space</span>numbers = map(int, input("Enter multiple integers separated by space: ").split())
<span class="annotate"># sum the entered numbers</span>total = sum(numbers)
<span class="annotate"># print the total sum</span>print("The total sum is:", total)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 13: Inputting and Concatenating Strings</span>
<span class="annotate"># enter two strings</span>string1 = input("Enter the first string: ")
<span class="annotate"></span>string2 = input("Enter the second string: ")
<span class="annotate"># concatenate the strings</span>concatenated = string1 + " " + string2
<span class="annotate"># print the concatenated result</span>print("Concatenated string:", concatenated)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 14: Inputting and Multiplying a String</span>
<span class="annotate"># enter a string and a number</span>text = input("Enter a string: ")
<span class="annotate"></span>repeat = int(input("Enter the number of repetitions: "))
<span class="annotate"># multiply the string</span>result = text * repeat
<span class="annotate"># print the repeated string</span>print("Repeated string:", result)
</li>
<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 15: Inputting and Finding Maximum Value</span>
<span class="annotate"># enter multiple integers separated by space</span>numbers = list(map(int, input("Enter numbers separated by space: ").split()))
<span class="annotate"># find the maximum value</span>max_value = max(numbers)
<span class="annotate"># print the maximum value</span>print("The maximum value is:", max_value)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 16: Inputting and Finding Minimum Value</span>
<span class="annotate"># enter multiple integers separated by space</span>numbers = list(map(int, input("Enter numbers separated by space: ").split()))
<span class="annotate"># find the minimum value</span>min_value = min(numbers)
<span class="annotate"># print the minimum value</span>print("The minimum value is:", min_value)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 17: Inputting and Calculating Average</span>
<span class="annotate"># enter multiple integers separated by space</span>numbers = list(map(int, input("Enter numbers separated by space: ").split()))
<span class="annotate"># calculate the average</span>average = sum(numbers) / len(numbers)
<span class="annotate"># print the average</span>print("The average is:", average)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 18: Inputting a List and Sorting It</span>
<span class="annotate"># enter multiple integers separated by space</span>numbers = list(map(int, input("Enter numbers separated by space: ").split()))
<span class="annotate"># sort the numbers</span>sorted_numbers = sorted(numbers)
<span class="annotate"># print the sorted list</span>print("Sorted numbers:", sorted_numbers)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 19: Inputting and Checking for Duplicates</span>
<span class="annotate"># enter multiple integers separated by space</span>numbers = list(map(int, input("Enter numbers separated by space: ").split()))
<span class="annotate"># check for duplicates</span>has_duplicates = len(numbers) != len(set(numbers))
<span class="annotate"># print if duplicates exist</span>print("Duplicates exist:", has_duplicates)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 20: Inputting and Removing Duplicates</span>
<span class="annotate"># enter multiple integers separated by space</span>numbers = list(map(int, input("Enter numbers separated by space: ").split()))
<span class="annotate"># remove duplicates</span>unique_numbers = list(set(numbers))
<span class="annotate"># print the unique list</span>print("Unique numbers:", unique_numbers)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 21: Inputting and Counting Occurrences</span>
<span class="annotate"># enter a string</span>text = input("Enter a string: ")
<span class="annotate"># input character to count</span>char = input("Enter character to count: ")
<span class="annotate"># count occurrences</span>count = text.count(char)
<span class="annotate"># print the count</span>print("The character '", char, "' appears", count, "times.")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 22: Inputting and Replacing Characters in a String</span>
<span class="annotate"># enter a string</span>text = input("Enter a string: ")
<span class="annotate"># enter character to replace and the new character</span>old_char = input("Enter character to replace: ")
<span class="annotate"></span>new_char = input("Enter new character: ")
<span class="annotate"># replace characters</span>new_text = text.replace(old_char, new_char)
<span class="annotate"># print the new string</span>print("Modified string:", new_text)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 23: Inputting and Checking String Length</span>
<span class="annotate"># enter a string</span>text = input("Enter a string: ")
<span class="annotate"># check the length of the string</span>length = len(text)
<span class="annotate"># print the length</span>print("The length of the string is:", length)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 24: Inputting and Capitalizing a String</span>
<span class="annotate"># enter a string</span>text = input("Enter a string: ")
<span class="annotate"># capitalize the string</span>capitalized_text = text.capitalize()
<span class="annotate"># print the capitalized string</span>print("Capitalized string:", capitalized_text)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 25: Inputting and Reversing a String</span>
<span class="annotate"># enter a string</span>text = input("Enter a string: ")
<span class="annotate"># reverse the string</span>reversed_text = text[::-1]
<span class="annotate"># print the reversed string</span>print("Reversed string:", reversed_text)
</li>

<!-- More examples can be generated similarly for the remaining 30 inputs -->

    </ul>
  </li>
   
     <li>
    <div class="link"><span class="material-symbols-outlined">
</span>Python Variables<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu">


      
<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 1: Assign Value to Variable</span>
<span class="annotate"># assigning value to a variable</span>age = 25
<span class="annotate"># print variable</span>print("Age:", age)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 2: Assign-Reassign Variable</span>
<span class="annotate"># assigning value</span>x = 10
<span class="annotate"># reassigning new value</span>x = 20
<span class="annotate"># print variable</span>print("Updated x:", x)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 3: Assign a String to a Variable</span>
<span class="annotate"># assigning a string</span>name = "John"
<span class="annotate"># print string</span>print("Name:", name)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 4: Assign a Float to a Variable</span>
<span class="annotate"># assigning a float value</span>pi = 3.14159
<span class="annotate"># print float</span>print("Value of pi:", pi)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 5: Assign Boolean to a Variable</span>
<span class="annotate"># assigning boolean value</span>is_active = True
<span class="annotate"># print boolean</span>print("Is Active:", is_active)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 6: Assign None to a Variable</span>
<span class="annotate"># assigning None</span>result = None
<span class="annotate"># print None</span>print("Result:", result)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 7: Assign Multiple Variables in One Line</span>
<span class="annotate"># assigning multiple variables</span>a, b, c = 1, 2, 3
<span class="annotate"># print variables</span>print("a:", a, "b:", b, "c:", c)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 8: Swap Two Variables</span>
<span class="annotate"># swapping variables</span>x, y = 5, 10
<span class="annotate"># swapping variables</span>x, y = y, x
<span class="annotate"># print swapped values</span>print("x:", x, "y:", y)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 9: Assign a List to a Variable</span>
<span class="annotate"># assigning a list</span>colors = ["red", "green", "blue"]
<span class="annotate"># print list</span>print("Colors:", colors)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 10: Assign a Tuple to a Variable</span>
<span class="annotate"># assigning a tuple</span>dimensions = (1920, 1080)
<span class="annotate"># print tuple</span>print("Dimensions:", dimensions)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 11: Assign a Dictionary to a Variable</span>
<span class="annotate"># assigning a dictionary</span>person = {"name": "Alice", "age": 30}
<span class="annotate"># print dictionary</span>print("Person:", person)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 12: Assign and Print Using Concatenation</span>
<span class="annotate"># assigning variables</span>name = "Bob"
<span class="annotate"></span>age = 28
<span class="annotate"># print using concatenation</span>print(name + " is " + str(age) + " years old")</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 13: Assign a Boolean Expression Result</span>
<span class="annotate"># assigning a boolean expression</span>is_adult = age >= 18
<span class="annotate"># print result</span>print("Is Adult:", is_adult)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 14: Assign a Function Return Value</span>
<span class="annotate"># defining a function</span>def greet(): return "Hello"
<span class="annotate"># assigning return value</span>message = greet()
<span class="annotate"># print message</span>print(message)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 15: Assign a Set to a Variable</span>
<span class="annotate"># assigning a set</span>fruits = {"apple", "banana", "cherry"}
<span class="annotate"># print set</span>print("Fruits:", fruits)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 16: Assign and Update a List</span>
<span class="annotate"># assigning a list</span>numbers = [1, 2, 3]
<span class="annotate"># update list</span>numbers.append(4)
<span class="annotate"># print updated list</span>print("Updated List:", numbers)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 17: Assign and Check Type of Variable</span>
<span class="annotate"># assigning a value</span>value = 3.14
<span class="annotate"># print type</span>print("Type:", type(value))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 18: Assign Result of a Mathematical Expression</span>
<span class="annotate"># assigning result</span>result = 5 + 3 * 2
<span class="annotate"># print result</span>print("Result:", result)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 19: Assign and Print a Variable Using Format Method</span>
<span class="annotate"># assigning a value</span>temperature = 36.6
<span class="annotate"># print using format method</span>print("Temperature: {}".format(temperature))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 20: Assign a Variable and Perform In-Place Addition</span>
<span class="annotate"># assigning a value</span>count = 10
<span class="annotate"># in-place addition</span>count += 5
<span class="annotate"># print updated value</span>print("Count:", count)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 21: Assign a Variable and Perform Floor Division</span>
<span class="annotate"># assigning a value</span>a = 17
<span class="annotate"></span>b = 3
<span class="annotate"># floor division</span>result = a // b
<span class="annotate"># print result</span>print("Result:", result)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 22: Assign Variable with Power of Another Variable</span>
<span class="annotate"># assigning values</span>base = 2
<span class="annotate"></span>exp = 3
<span class="annotate"># power calculation</span>result = base ** exp
<span class="annotate"># print result</span>print(base, "^", exp, "=", result)</li>

<!-- More examples can be generated similarly for the remaining 28 variables -->



</ul>
  </li>

<li>
    <div class="link"><span class="material-symbols-outlined">
</span>Test Your Skills:Variables<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu"style="margin-left:1%;width:98%;padding-left: 0px;padding-right: 0px;margin-right:-3%; background: #000;overflow:hidden;">
      
  



 <iframe src="mycompiler/testquizvariables.html"style="border-bottom-left-radius:0px;border-bottom-right-radius:0px;height:390px;top:0%;border:none; width:100%;overflow-x:hidden;overflow-y:auto;scrollbar-width: none;margin-left:0%;justify-content: center;"></iframe>
</span></li>
</li></ul>
  </li>


<li>
    <div class="link"><span class="material-symbols-outlined">
</span>Python Operators<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu">


<li><span class="annotate">#Arithmetic Operators:</span>
<span style="color:#a29696;font-size: 13px;text-align:center;">Arithmetic operators in Python are used to perform basic mathematical operations on numerical values.These operators are essential for performing arithmetic calculations in Python. Here’s a breakdown of how each operator is used:
<li>
x = a + b <span class="inline-annotate"># Adds two numbers</span><br>
x = a - b         <span class="inline-annotate"># Subtracts two numbers</span><br>
x = a * b        <span class="inline-annotate"># Multiplies two numbers</span><br>
x = a / b        <span class="inline-annotate"># Divides two numbers</span><br>
x = a % b        <span class="inline-annotate"># Remainder of division</span><br>
x = a ** b      <span class="inline-annotate"># Power of a number</span><br>
x = a // b      <span class="inline-annotate"># Floor division</span><br>
</li>

<li><span class="annotate">#Assignment Operators:</span>
<span style="color:#a29696;font-size: 13px;text-align:center;">Assignment operators in Python are used to assign values to variables and to perform operations while assigning the result back to the same variable. They make code concise and improve readability when performing operations on variables.Here’s a breakdown of how each operator is used:
<li>
x = a      <span class="inline-annotate"># Assigns value</span><br>
x += a     <span class="inline-annotate"># Adds and assigns</span><br>
x -= a     <span class="inline-annotate"># Subtracts and assigns</span><br>
x *= a     <span class="inline-annotate"># Multiplies and assigns</span><br>
x /= a     <span class="inline-annotate"># Divides and assigns</span><br>
x //= a    <span class="inline-annotate"># Floor divides and assigns</span><br>
x %= a     <span class="inline-annotate"># Modulus and assigns</span><br>
x **= a    <span class="inline-annotate"># Exponent and assigns</span><br>
</li>

<li><span class="annotate"># Comparison Operators:</span>
<span style="color:#a29696;font-size: 13px;text-align:center;">Comparison operators in Python are used to compare two values or expressions. They evaluate to a boolean result, either True or False, and play a crucial role in programming for decision making:Here’s a breakdown of how each operator is used:
<li>
x == a     <span class="inline-annotate"># Equals</span><br>
x != a     <span class="inline-annotate"># Not equal</span><br>
x > a      <span class="inline-annotate"># Greater than</span><br>
x < a      <span class="inline-annotate"># Less than</span><br>
x >= a     <span class="inline-annotate"># Greater or equal</span><br>
x <= a     <span class="inline-annotate"># Less or equal</span><br>
</li>
<li><span class="annotate"># Logical Operators:</span>
<span style="color:#a29696;font-size: 13px;text-align:center;">Logical operators in Python are used to combine or modify boolean expressions, enabling more complex decision-making in your code.Here’s a breakdown of how each operator is used:
<li>

x = a and b  <span class="inline-annotate"># Logical AND</span><br>
x = a or b   <span class="inline-annotate"># Logical OR</span><br>
x = not a    <span class="inline-annotate"># Logical NOT</span><br>
</li>

<li><span class="annotate"># Bitwise Operators:</span>
<span style="color:#a29696;font-size: 13px;text-align:center;">Bitwise operators in Python are used to perform operations on individual bits of integer values.Bitwise operations are often used in data encoding, compression algorithms, and cryptographic functions. They enable packing multiple values into a single integer, reducing memory usage. Here’s a breakdown of how each operator is used:
<li>

x = a & b    <span class="inline-annotate"># Bitwise AND</span><br>
x = a | b    <span class="inline-annotate"># Bitwise OR</span><br>
x = a ^ b    <span class="inline-annotate"># Bitwise XOR</span><br>
x = ~a       <span class="inline-annotate"># Bitwise NOT</span><br>
x = a << b   <span class="inline-annotate"># Left shift</span><br>
x = a >> b   <span class="inline-annotate"># Right shift</span><br>
</li>
<li><span class="annotate"># Membership Operators:</span>
<span style="color:#a29696;font-size: 13px;text-align:center;">Membership operators in Python are used to test for the presence of a value within a sequence (like lists, tuples, sets, or strings).Membership operators help validate whether a particular value exists in a collection, making it easy to ensure that data meets certain criteria before proceeding with operations.Here’s a breakdown of how each operator is used:
<li>

x = a in b      <span class="inline-annotate"># In sequence</span><br>
x = a not in b  <span class="inline-annotate"># Not in sequence</span><br>
</li>

<li><span class="annotate"># Identity Operators:</span>
<span style="color:#a29696;font-size: 13px;text-align:center;">Assignment operators in Python are used to assign values to variables and to perform operations while assigning the result back to the same variable. They make code concise and improve readability when performing operations on variables.Here’s a breakdown of how each operator is used:
<li>

x = a is b      <span class="inline-annotate"># Same object</span><br>
x = a is not b  <span class="inline-annotate"># Different object</span><br>
</li>

<li><span style="color:white;font-size: 13px;font-weight: bold;">1: * Arithmetic Operators *</span>
<li><span style="color:white;font-size: 11px;font-weight: bold;">#Addition Operators:Example 1</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable</span><br>
result = a + 5      <span class="inline-annotate"># Add Integer</span><br>
print(result)      <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Addition Operators:Example 2</span><br>
a = 3.5     <span class="inline-annotate"># Declare Float Variable</span><br>
b = 2.2     <span class="inline-annotate"># Declare Float Variable</span><br>
result = a + b     <span class="inline-annotate"># Add Floats</span><br>
print(result)      <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Addition Operators:Example 3</span><br>
x = "Hello"     <span class="inline-annotate"># Declare String Variable</span><br>
y = " World"    <span class="inline-annotate"># Declare String Variable</span><br>
result = x + y     <span class="inline-annotate"># Concatenate Strings</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Addition Operators:Example 4</span><br>
a = [1, 2, 3]     <span class="inline-annotate"># Declare List</span><br>
b = [4, 5, 6]     <span class="inline-annotate"># Declare List</span><br>
result = a + b     <span class="inline-annotate"># Concatenate Lists</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Addition Operators:Example 5</span><br>
a = (7, 8)     <span class="inline-annotate"># Declare Tuple</span><br>
b = (9, 10)    <span class="inline-annotate"># Declare Tuple</span><br>
result = a + b     <span class="inline-annotate"># Concatenate Tuples</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Addition Operators:Example 6</span><br>
num1 = 12     <span class="inline-annotate"># Declare Integer</span><br>
num2 = 5.5    <span class="inline-annotate"># Declare Float</span><br>
result = num1 + num2     <span class="inline-annotate"># Add Integer and Float</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Addition Operators:Example 7</span><br>
a = 2.75     <span class="inline-annotate"># Declare Float</span><br>
b = 10     <span class="inline-annotate"># Declare Integer</span><br>
result = a + b     <span class="inline-annotate"># Add Float and Integer</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Addition Operators:Example 8</span><br>
name = "John"     <span class="inline-annotate"># Declare String Variable</span><br>
age = 30     <span class="inline-annotate"># Declare Integer</span><br>
result = name + " is " + str(age)     <span class="inline-annotate"># Concatenate String and Integer</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Addition Operators:Example 9</span><br>
a = True     <span class="inline-annotate"># Declare Boolean Variable</span><br>
b = 1     <span class="inline-annotate"># Declare Integer</span><br>
result = a + b     <span class="inline-annotate"># Add Boolean and Integer</span><br>
print(result)     <span class="inline-annotate"># Print result (Boolean as Integer 1)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Addition Operators:Example 10</span><br>
a = 0b1010     <span class="inline-annotate"># Declare Binary Number</span><br>
b = 5     <span class="inline-annotate"># Declare Integer</span><br>
result = a + b     <span class="inline-annotate"># Add Binary and Integer</span><br>
print(result)     <span class="inline-annotate"># Print result (Decimal)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Addition Operators:Example 11</span><br>
num1 = 0o12     <span class="inline-annotate"># Declare Octal Number</span><br>
num2 = 5     <span class="inline-annotate"># Declare Integer</span><br>
result = num1 + num2     <span class="inline-annotate"># Add Octal and Integer</span><br>
print(result)     <span class="inline-annotate"># Print result (Decimal)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Addition Operators:Example 12</span><br>
a = 0x1F     <span class="inline-annotate"># Declare Hexadecimal Number</span><br>
b = 10     <span class="inline-annotate"># Declare Integer</span><br>
result = a + b     <span class="inline-annotate"># Add Hexadecimal and Integer</span><br>
print(result)     <span class="inline-annotate"># Print result (Decimal)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Addition Operators:Example 13</span><br>
list1 = [10] * 3     <span class="inline-annotate"># Repeat List Elements</span><br>
result = sum(list1)     <span class="inline-annotate"># Sum List Elements</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Addition Operators:Example 14</span><br>
total = sum(range(1, 11))     <span class="inline-annotate"># Sum of Range (1 to 10)</span><br>
print(total)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Addition Operators:Example 15</span><br>
a = {1, 2}     <span class="inline-annotate"># Declare Set</span><br>
b = {3, 4}     <span class="inline-annotate"># Declare Set</span><br>
result = a.union(b)     <span class="inline-annotate"># Union of Sets (Addition of Elements)</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Subtraction Operator:Example 1</span><br>
a = 15      <span class="inline-annotate"># Declare Integer</span><br>
result = a - 5      <span class="inline-annotate"># Subtract Integer</span><br>
print(result)      <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Subtraction Operator:Example 2</span><br>
x = 12.5     <span class="inline-annotate"># Declare Float</span><br>
y = 2.5     <span class="inline-annotate"># Declare Float</span><br>
result = x - y     <span class="inline-annotate"># Subtract Floats</span><br>
print(result)      <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Subtraction Operator:Example 3</span><br>
a = 100     <span class="inline-annotate"># Declare Integer</span><br>
result = a - 45     <span class="inline-annotate"># Subtract Integer</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Subtraction Operator:Example 4</span><br>
a = 7.8     <span class="inline-annotate"># Declare Float</span><br>
b = 3.2     <span class="inline-annotate"># Declare Float</span><br>
result = a - b     <span class="inline-annotate"># Subtract Floats</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Subtraction Operator:Example 5</span><br>
a = 10     <span class="inline-annotate"># Declare Integer</span><br>
result = a - 0b101     <span class="inline-annotate"># Subtract Binary</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Subtraction Operator:Example 6</span><br>
a = 0xFF     <span class="inline-annotate"># Declare Hexadecimal</span><br>
b = 5     <span class="inline-annotate"># Declare Integer</span><br>
result = a - b     <span class="inline-annotate"># Subtract Hexadecimal</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Subtraction Operator:Example 7</span><br>
a = 1000     <span class="inline-annotate"># Declare Integer</span><br>
b = 200     <span class="inline-annotate"># Declare Integer</span><br>
result = a - b     <span class="inline-annotate"># Subtract Integers</span><br>
print(result)     <span class="inline-annotate"># Print result</span>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Subtraction Operator:Example 8</span><br>
a = 3.14159     <span class="inline-annotate"># Declare Float</span><br>
b = 1.14159     <span class="inline-annotate"># Declare Float</span><br>
result = a - b     <span class="inline-annotate"># Subtract Floats</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Subtraction Operator:Example 9</span><br>
list1 = [5, 3, 2]     <span class="inline-annotate"># Declare List</span><br>
result = sum(list1) - 5     <span class="inline-annotate"># Subtract from List Sum</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Subtraction Operator:Example 10</span><br>
a = 20     <span class="inline-annotate"># Declare Integer</span><br>
b = 5.5     <span class="inline-annotate"># Declare Float</span><br>
result = a - b     <span class="inline-annotate"># Subtract Integer from Float</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Subtraction Operator:Example 11</span><br>
a = 100     <span class="inline-annotate"># Declare Integer</span><br>
result = a - 50 - 25     <span class="inline-annotate"># Multiple Subtraction</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Subtraction Operator:Example 12</span><br>
a = 0o12     <span class="inline-annotate"># Declare Octal</span><br>
b = 3     <span class="inline-annotate"># Declare Integer</span><br>
result = a - b     <span class="inline-annotate"># Subtract Octal and Integer</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Subtraction Operator:Example 13</span><br>
x = 100     <span class="inline-annotate"># Declare Integer</span><br>
y = 50     <span class="inline-annotate"># Declare Integer</span><br>
result = x - y     <span class="inline-annotate"># Subtract Integers</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Subtraction Operator:Example 14</span><br>
a = 15.75     <span class="inline-annotate"># Declare Float</span><br>
b = 5     <span class="inline-annotate"># Declare Integer</span><br>
result = a - b     <span class="inline-annotate"># Subtract Integer from Float</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Subtraction Operator:Example 15</span><br>
a = 2**4     <span class="inline-annotate"># Declare Exponent</span><br>
b = 10     <span class="inline-annotate"># Declare Integer</span><br>
result = a - b     <span class="inline-annotate"># Subtract Exponent Result</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Multiplication Operator:Example 1</span><br>
a = 7      <span class="inline-annotate"># Declare Integer</span><br>
result = a * 5      <span class="inline-annotate"># Multiply by Integer</span><br>
print(result)      <span class="inline-annotate"># Print result</span><br>
</li>
<li><span style="color:white;font-size: 11px;font-weight: bold;">#Multiplication Operator:Example 2</span><br>
x = 3.5     <span class="inline-annotate"># Declare Float</span><br>
y = 2     <span class="inline-annotate"># Declare Integer</span><br>
result = x * y     <span class="inline-annotate"># Multiply Float and Integer</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Multiplication Operator:Example 3</span><br>
a = "Hello "     <span class="inline-annotate"># Declare String</span><br>
result = a * 3     <span class="inline-annotate"># Multiply String</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Multiplication Operator:Example 4</span><br>
list1 = [1, 2]     <span class="inline-annotate"># Declare List</span><br>
result = list1 * 2     <span class="inline-annotate"># Multiply List</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Multiplication Operator:Example 5</span><br>
a = 6.75     <span class="inline-annotate"># Declare Float</span><br>
b = 4     <span class="inline-annotate"># Declare Integer</span><br>
result = a * b     <span class="inline-annotate"># Multiply Float and Integer</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Multiplication Operator:Example 6</span><br>
a = 10     <span class="inline-annotate"># Declare Integer</span><br>
b = 0b101     <span class="inline-annotate"># Declare Binary</span><br>
result = a * b     <span class="inline-annotate"># Multiply Integer and Binary</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Multiplication Operator:Example 7</span><br>
a = 0xA     <span class="inline-annotate"># Declare Hexadecimal</span><br>
b = 3     <span class="inline-annotate"># Declare Integer</span><br>
result = a * b     <span class="inline-annotate"># Multiply Hexadecimal and Integer</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Multiplication Operator:Example 8</span><br>
name = "John"     <span class="inline-annotate"># Declare String</span><br>
result = name * 2     <span class="inline-annotate"># Multiply String</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Multiplication Operator:Example 9</span><br>
x = 5.5     <span class="inline-annotate"># Declare Float</span><br>
y = 4.2     <span class="inline-annotate"># Declare Float</span><br>
result = x * y     <span class="inline-annotate"># Multiply Floats</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Multiplication Operator:Example 10</span><br>
a = 5     <span class="inline-annotate"># Declare Integer</span><br>
b = 4     <span class="inline-annotate"># Declare Integer</span><br>
result = a * b     <span class="inline-annotate"># Multiply Integers</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Multiplication Operator:Example 11</span><br>
a = 0o7     <span class="inline-annotate"># Declare Octal</span><br>
b = 5     <span class="inline-annotate"># Declare Integer</span><br>
result = a * b     <span class="inline-annotate"># Multiply Octal and Integer</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Multiplication Operator:Example 12</span><br>
a = 3**2     <span class="inline-annotate"># Declare Exponent</span><br>
b = 4     <span class="inline-annotate"># Declare Integer</span><br>
result = a * b     <span class="inline-annotate"># Multiply Exponent Result</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Multiplication Operator:Example 13</span><br>
a = 8     <span class="inline-annotate"># Declare Integer</span><br>
b = -2     <span class="inline-annotate"># Declare Negative Integer</span><br>
result = a * b     <span class="inline-annotate"># Multiply by Negative Integer</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Multiplication Operator:Example 14</span><br>
a = 4.5     <span class="inline-annotate"># Declare Float</span><br>
b = 2.5     <span class="inline-annotate"># Declare Float</span><br>
result = a * b     <span class="inline-annotate"># Multiply Floats</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Multiplication Operator:Example 15</span><br>
a = True     <span class="inline-annotate"># Declare Boolean</span><br>
b = 5     <span class="inline-annotate"># Declare Integer</span><br>
result = a * b     <span class="inline-annotate"># Multiply Boolean and Integer</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Division Operator:Example 1</span><br>
a = 20      <span class="inline-annotate"># Declare Integer</span><br>
result = a / 5      <span class="inline-annotate"># Division by Integer</span><br>
print(result)      <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Division Operator: Example 2</span><br> x = 15.5 <span class="inline-annotate"># Declare Float</span><br> y = 2.5 <span class="inline-annotate"># Declare Float</span><br> result = x / y <span class="inline-annotate"># Divide Floats</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Division Operator: Example 3</span><br> a = 10 <span class="inline-annotate"># Declare Integer</span><br> result = a / 4 <span class="inline-annotate"># Division by Integer</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Division Operator: Example 4</span><br> a = 50 <span class="inline-annotate"># Declare Integer</span><br> b = 2 <span class="inline-annotate"># Declare Integer</span><br> result = a / b <span class="inline-annotate"># Divide Integers</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Division Operator: Example 5</span><br> x = 9 <span class="inline-annotate"># Declare Integer</span><br> result = x / 3 <span class="inline-annotate"># Division by Integer</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Division Operator: Example 6</span><br> a = 8.0 <span class="inline-annotate"># Declare Float</span><br> b = 2 <span class="inline-annotate"># Declare Integer</span><br> result = a / b <span class="inline-annotate"># Divide Float by Integer</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Division Operator: Example 7</span><br> x = 100 <span class="inline-annotate"># Declare Integer</span><br> y = 25 <span class="inline-annotate"># Declare Integer</span><br> result = x / y <span class="inline-annotate"># Divide Integers</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Division Operator: Example 8</span><br> a = 0x10 <span class="inline-annotate"># Declare Hexadecimal</span><br> result = a / 4 <span class="inline-annotate"># Divide Hexadecimal</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Division Operator: Example 9</span><br> x = 7.5 <span class="inline-annotate"># Declare Float</span><br> result = x / 3 <span class="inline-annotate"># Division by Integer</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Division Operator: Example 10</span><br> a = 25 <span class="inline-annotate"># Declare Integer</span><br> result = a / 5 <span class="inline-annotate"># Division by Integer</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Division Operator: Example 11</span><br> a = 0o16 <span class="inline-annotate"># Declare Octal</span><br> b = 2 <span class="inline-annotate"># Declare Integer</span><br> result = a / b <span class="inline-annotate"># Divide Octal and Integer</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Division Operator: Example 12</span><br> a = 9**2 <span class="inline-annotate"># Declare Exponent</span><br> b = 9 <span class="inline-annotate"># Declare Integer</span><br> result = a / b <span class="inline-annotate"># Divide Exponent Result</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Division Operator: Example 13</span><br> a = 16 <span class="inline-annotate"># Declare Integer</span><br> b = -4 <span class="inline-annotate"># Declare Negative Integer</span><br> result = a / b <span class="inline-annotate"># Divide by Negative Integer</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Division Operator: Example 14</span><br> x = 81 <span class="inline-annotate"># Declare Integer</span><br> y = 9 <span class="inline-annotate"># Declare Integer</span><br> result = x / y <span class="inline-annotate"># Divide Integers</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Division Operator: Example 15</span><br> a = 100 <span class="inline-annotate"># Declare Integer</span><br> result = a / True <span class="inline-annotate"># Divide by Boolean</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li>


<li><span style="color:white;font-size: 11px;font-weight: bold;">#Remainder Operator:Example 1</span><br>
a = 10      <span class="inline-annotate"># Declare Integer</span><br>
result = a % 3      <span class="inline-annotate"># Remainder after Division</span><br>
print(result)      <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Remainder Operator: Example 2</span><br> x = 25 <span class="inline-annotate"># Declare Integer</span><br> y = 4 <span class="inline-annotate"># Declare Integer</span><br> result = x % y <span class="inline-annotate"># Remainder after Division</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Remainder Operator: Example 3</span><br> a = 100 <span class="inline-annotate"># Declare Integer</span><br> result = a % 6 <span class="inline-annotate"># Remainder after Division</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Remainder Operator: Example 4</span><br> x = 50.5 <span class="inline-annotate"># Declare Float</span><br> y = 4.2 <span class="inline-annotate"># Declare Float</span><br> result = x % y <span class="inline-annotate"># Remainder after Division</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Remainder Operator: Example 5</span><br> a = 0b1101 <span class="inline-annotate"># Declare Binary</span><br> result = a % 5 <span class="inline-annotate"># Remainder with Binary</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Remainder Operator: Example 6</span><br> x = 13 <span class="inline-annotate"># Declare Integer</span><br> y = 3 <span class="inline-annotate"># Declare Integer</span><br> result = x % y <span class="inline-annotate"># Remainder after Division</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Remainder Operator: Example 7</span><br> a = 144 <span class="inline-annotate"># Declare Integer</span><br> result = a % 12 <span class="inline-annotate"># Remainder after Division</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Remainder Operator: Example 8</span><br> a = 7.5 <span class="inline-annotate"># Declare Float</span><br> result = a % 2 <span class="inline-annotate"># Remainder with Float</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Remainder Operator: Example 9</span><br> x = 0xA <span class="inline-annotate"># Declare Hexadecimal</span><br> result = x % 4 <span class="inline-annotate"># Remainder with Hexadecimal</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Remainder Operator: Example 10</span><br> a = 81 <span class="inline-annotate"># Declare Integer</span><br> result = a % 10 <span class="inline-annotate"># Remainder after Division</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Remainder Operator: Example 11</span><br> a = 9**2 <span class="inline-annotate"># Declare Exponent</span><br> b = 10 <span class="inline-annotate"># Declare Integer</span><br> result = a % b <span class="inline-annotate"># Remainder of Exponent Result</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Remainder Operator: Example 12</span><br> a = 0o17 <span class="inline-annotate"># Declare Octal</span><br> result = a % 3 <span class="inline-annotate"># Remainder with Octal</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Remainder Operator: Example 13</span><br> x = 19 <span class="inline-annotate"># Declare Integer</span><br> y = -5 <span class="inline-annotate"># Declare Negative Integer</span><br> result = x % y <span class="inline-annotate"># Remainder with Negative Integer</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Remainder Operator: Example 14</span><br> x = 27 <span class="inline-annotate"># Declare Integer</span><br> y = 8 <span class="inline-annotate"># Declare Integer</span><br> result = x % y <span class="inline-annotate"># Remainder after Division</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li> <li><span style="color:white;font-size: 11px;font-weight: bold;">#Remainder Operator: Example 15</span><br> a = 10 <span class="inline-annotate"># Declare Integer</span><br> result = a % True <span class="inline-annotate"># Remainder with Boolean</span><br> print(result) <span class="inline-annotate"># Print result</span><br> </li>


<li><span style="color:white;font-size: 11px;font-weight: bold;">#PowerOfNumber: Example 1</span><br>
a = 2      <span class="inline-annotate"># Declare Integer</span><br>
result = a ** 3      <span class="inline-annotate"># Power of 2 to the power of 3</span><br>
print(result)      <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#PowerOfNumber: Example 2</span><br>
x = 5     <span class="inline-annotate"># Declare Integer</span><br>
y = 4     <span class="inline-annotate"># Declare Integer</span><br>
result = x ** y     <span class="inline-annotate"># Power of 5 to the power of 4</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#PowerOfNumber: Example 3</span><br>
a = 10     <span class="inline-annotate"># Declare Integer</span><br>
result = a ** 2     <span class="inline-annotate"># Square of 10</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#PowerOfNumber: Example 4</span><br>
x = 3.5     <span class="inline-annotate"># Declare Float</span><br>
y = 2     <span class="inline-annotate"># Declare Integer</span><br>
result = x ** y     <span class="inline-annotate"># Power of Float to Integer</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#PowerOfNumber: Example 5</span><br>
base = 6     <span class="inline-annotate"># Declare Integer</span><br>
exp = 3     <span class="inline-annotate"># Declare Exponent</span><br>
result = base ** exp     <span class="inline-annotate"># Power of base 6 raised to 3</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>


<li><span style="color:white;font-size: 11px;font-weight: bold;">#Floor Division: Example 1</span><br>
a = 17      <span class="inline-annotate"># Declare Integer</span><br>
result = a // 3      <span class="inline-annotate"># Floor division of 17 by 3</span><br>
print(result)      <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Floor Division: Example 2</span><br>
x = 28     <span class="inline-annotate"># Declare Integer</span><br>
y = 5     <span class="inline-annotate"># Declare Integer</span><br>
result = x // y     <span class="inline-annotate"># Floor division of 28 by 5</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Floor Division: Example 3</span><br>
a = 10.5     <span class="inline-annotate"># Declare Float</span><br>
result = a // 2     <span class="inline-annotate"># Floor division of Float by Integer</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Floor Division: Example 4</span><br>
x = 50     <span class="inline-annotate"># Declare Integer</span><br>
y = 8     <span class="inline-annotate"># Declare Integer</span><br>
result = x // y     <span class="inline-annotate"># Floor division of 50 by 8</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;">#Floor Division: Example 5</span><br>
base = 100     <span class="inline-annotate"># Declare Integer</span><br>
exp = 6     <span class="inline-annotate"># Declare Integer</span><br>
result = base // exp     <span class="inline-annotate"># Floor division of 100 by 6</span><br>
print(result)     <span class="inline-annotate"># Print result</span><br>
</li>


<li><span style="color:white;font-size: 14px;font-weight: bold;">2: * Assignment Operators *</span></li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 1: Assigns Value</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable</span><br>
x = a      <span class="inline-annotate"># Assigns value of 'a' to 'x'</span><br>
print(x)      <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 2: Adds and Assign</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable</span><br>
x = 5      <span class="inline-annotate"># Assign value to 'x'</span><br>
x += a      <span class="inline-annotate"># Adds 'a' to 'x' and assigns</span><br>
print(x)      <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 3: Subtracts and Assign</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable</span><br>
x = 20      <span class="inline-annotate"># Assign value to 'x'</span><br>
x -= a      <span class="inline-annotate"># Subtracts 'a' from 'x' and assigns</span><br>
print(x)      <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 4: Multiplies and Assign</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable</span><br>
x = 3      <span class="inline-annotate"># Assign value to 'x'</span><br>
x *= a      <span class="inline-annotate"># Multiplies 'x' by 'a' and assigns</span><br>
print(x)      <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 5: Divides and Assign</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable</span><br>
x = 50      <span class="inline-annotate"># Assign value to 'x'</span><br>
x /= a      <span class="inline-annotate"># Divides 'x' by 'a' and assigns</span><br>
print(x)      <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 6: Floor Divides and Assign</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable</span><br>
x = 55      <span class="inline-annotate"># Assign value to 'x'</span><br>
x //= a      <span class="inline-annotate"># Floor divides 'x' by 'a' and assigns</span><br>
print(x)      <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 7: Modulus and Assign</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable</span><br>
x = 37      <span class="inline-annotate"># Assign value to 'x'</span><br>
x %= a      <span class="inline-annotate"># Modulus 'x' by 'a' and assigns</span><br>
print(x)      <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 8: Exponent and Assign</span><br>
a = 2      <span class="inline-annotate"># Declare Integer Variable</span><br>
x = 3      <span class="inline-annotate"># Assign value to 'x'</span><br>
x **= a      <span class="inline-annotate"># Raises 'x' to the power of 'a' and assigns</span><br>
print(x)      <span class="inline-annotate"># Print result</span><br>
</li>

<li><span style="color:white;font-size: 14px;font-weight: bold;">3: * Comparison Operators: *</span></li>
<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 1: Equals</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable</span><br>
x = 10      <span class="inline-annotate"># Assign value to 'x'</span><br>
result = (x == a)      <span class="inline-annotate"># Check if 'x' equals 'a'</span><br>
print(result)      <span class="inline-annotate"># Print result (True or False)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 2: Not Equal</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable</span><br>
x = 5      <span class="inline-annotate"># Assign value to 'x'</span><br>
result = (x != a)      <span class="inline-annotate"># Check if 'x' is not equal to 'a'</span><br>
print(result)      <span class="inline-annotate"># Print result (True or False)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 3: Greater Than</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable</span><br>
x = 15      <span class="inline-annotate"># Assign value to 'x'</span><br>
result = (x > a)      <span class="inline-annotate"># Check if 'x' is greater than 'a'</span><br>
print(result)      <span class="inline-annotate"># Print result (True or False)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 4: Less Than</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable</span><br>
x = 5      <span class="inline-annotate"># Assign value to 'x'</span><br>
result = (x < a)      <span class="inline-annotate"># Check if 'x' is less than 'a'</span><br>
print(result)      <span class="inline-annotate"># Print result (True or False)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 5: Greater or Equal</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable</span><br>
x = 10      <span class="inline-annotate"># Assign value to 'x'</span><br>
result = (x >= a)      <span class="inline-annotate"># Check if 'x' is greater than or equal to 'a'</span><br>
print(result)      <span class="inline-annotate"># Print result (True or False)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 6: Less or Equal</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable</span><br>
x = 10      <span class="inline-annotate"># Assign value to 'x'</span><br>
result = (x <= a)      <span class="inline-annotate"># Check if 'x' is less than or equal to 'a'</span><br>
print(result)      <span class="inline-annotate"># Print result (True or False)</span><br>
</li>

<li><span style="color:white;font-size: 13px;font-weight: bold;">4: * Logical Operators: *</span></li>
<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 1: Logical AND</span><br>
a = True      <span class="inline-annotate"># Declare Boolean Variable</span><br>
b = False      <span class="inline-annotate"># Declare Boolean Variable</span><br>
x = a and b      <span class="inline-annotate"># Logical AND: True only if both 'a' and 'b' are True</span><br>
print(x)      <span class="inline-annotate"># Print result (True or False)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 2: Logical OR</span><br>
a = True      <span class="inline-annotate"># Declare Boolean Variable</span><br>
b = False      <span class="inline-annotate"># Declare Boolean Variable</span><br>
x = a or b      <span class="inline-annotate"># Logical OR: True if either 'a' or 'b' is True</span><br>
print(x)      <span class="inline-annotate"># Print result (True or False)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 3: Logical NOT</span><br>
a = True      <span class="inline-annotate"># Declare Boolean Variable</span><br>
x = not a      <span class="inline-annotate"># Logical NOT: Inverts the truth value of 'a'</span><br>
print(x)      <span class="inline-annotate"># Print result (True or False)</span><br>
</li>

<li><span style="color:white;font-size: 13px;font-weight: bold;">5: * Bitwise  Operators: *</span></li>
<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 1: Bitwise AND</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable (binary: 1010)</span><br>
b = 4      <span class="inline-annotate"># Declare Integer Variable (binary: 0100)</span><br>
x = a & b      <span class="inline-annotate"># Bitwise AND: Performs AND operation between 'a' and 'b'</span><br>
print(x)      <span class="inline-annotate"># Print result (2 - binary: 0010)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 2: Bitwise OR</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable (binary: 1010)</span><br>
b = 4      <span class="inline-annotate"># Declare Integer Variable (binary: 0100)</span><br>
x = a | b      <span class="inline-annotate"># Bitwise OR: Performs OR operation between 'a' and 'b'</span><br>
print(x)      <span class="inline-annotate"># Print result (14 - binary: 1110)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 3: Bitwise XOR</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable (binary: 1010)</span><br>
b = 4      <span class="inline-annotate"># Declare Integer Variable (binary: 0100)</span><br>
x = a ^ b      <span class="inline-annotate"># Bitwise XOR: Performs XOR operation between 'a' and 'b'</span><br>
print(x)      <span class="inline-annotate"># Print result (14 - binary: 1110)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 4: Bitwise NOT</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable (binary: 1010)</span><br>
x = ~a      <span class="inline-annotate"># Bitwise NOT: Inverts bits of 'a'</span><br>
print(x)      <span class="inline-annotate"># Print result (-11)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 5: Left Shift</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable (binary: 1010)</span><br>
b = 2      <span class="inline-annotate"># Declare Shift Amount</span><br>
x = a << b      <span class="inline-annotate"># Left shift: Shifts bits of 'a' to the left by 'b'</span><br>
print(x)      <span class="inline-annotate"># Print result (40 - binary: 101000)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 6: Right Shift</span><br>
a = 10      <span class="inline-annotate"># Declare Integer Variable (binary: 1010)</span><br>
b = 2      <span class="inline-annotate"># Declare Shift Amount</span><br>
x = a >> b      <span class="inline-annotate"># Right shift: Shifts bits of 'a' to the right by 'b'</span><br>
print(x)      <span class="inline-annotate"># Print result (2 - binary: 10)</span><br>
</li>

<li><span style="color:white;font-size: 13px;font-weight: bold;">6: * Membership  Operators: *</span></li>
<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 1: In Sequence</span><br>
a = 3      <span class="inline-annotate"># Declare Integer Variable</span><br>
b = [1, 2, 3, 4, 5]      <span class="inline-annotate"># Declare List</span><br>
x = a in b      <span class="inline-annotate"># Check if 'a' is in the list 'b'</span><br>
print(x)      <span class="inline-annotate"># Print result (True or False)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 2: Not In Sequence</span><br>
a = 6      <span class="inline-annotate"># Declare Integer Variable</span><br>
b = [1, 2, 3, 4, 5]      <span class="inline-annotate"># Declare List</span><br>
x = a not in b      <span class="inline-annotate"># Check if 'a' is not in the list 'b'</span><br>
print(x)      <span class="inline-annotate"># Print result (True or False)</span><br>
</li>

<li><span style="color:white;font-size: 13px;font-weight: bold;">7: * Identity  Operators: *</span></li>
<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 1: Same Object</span><br>
a = [1, 2, 3]      <span class="inline-annotate"># Declare List</span><br>
b = a      <span class="inline-annotate"># Assign 'b' to the same object as 'a'</span><br>
x = a is b      <span class="inline-annotate"># Check if 'a' and 'b' refer to the same object</span><br>
print(x)      <span class="inline-annotate"># Print result (True or False)</span><br>
</li>

<li><span style="color:white;font-size: 11px;font-weight: bold;"># Example 2: Different Object</span><br>
a = [1, 2, 3]      <span class="inline-annotate"># Declare List</span><br>
b = [1, 2, 3]      <span class="inline-annotate"># Declare another list with the same values</span><br>
x = a is not b      <span class="inline-annotate"># Check if 'a' and 'b' refer to different objects</span><br>
print(x)      <span class="inline-annotate"># Print result (True or False)</span><br>
</li>


</li>

</ul>
<li>
    <div class="link"><span class="material-symbols-outlined">
</span>Test Your Skills:Operators<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu"style="margin-left:1%;width:98%;padding-left: 0px;padding-right: 0px;margin-right:-3%; background: #000;overflow:hidden;">
      
  



 <iframe src="mycompiler/testquizoperators.html"style="border-bottom-left-radius:0px;border-bottom-right-radius:0px;height:390px;top:0%;border:none; width:100%;overflow-x:hidden;overflow-y:auto;scrollbar-width: none;margin-left:0%;justify-content: center;"></iframe>
</span></li>
</li></ul>
  </li>

   <li>
    <div class="link"><span class="material-symbols-outlined">
</span>If-elif-else<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu">


<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 1: If-Else Statement with Numbers</span>
<span class="annotate"># Variable</span> num = 10
<span class="annotate"># check if the number is greater than 5</span> if num > 5:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("The number is greater than 5")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("The number is not greater than 5")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 2: If-Else Statement with Numbers</span>
<span class="annotate"># Variable</span> num = 3
<span class="annotate"># check if the number is even</span> if num % 2 == 0:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("The number is even")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("The number is odd")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 3: If-Else Statement with Strings</span>
<span class="annotate"># Variable</span> text = "Hello"
<span class="annotate"># check if the string is empty</span> if text == "":
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("The string is empty")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("The string is not empty")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 4: If-Else Statement with Strings</span>
<span class="annotate"># Variable</span> name = "Alice"
<span class="annotate"># check if the name is "Alice"</span> if name == "Alice":
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Hello, Alice!")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Hello, Stranger!")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 5: If-Else Statement with Lists</span>
<span class="annotate"># Variable</span> fruits = ["apple", "banana", "cherry"]
<span class="annotate"># check if "apple" is in the list</span> if "apple" in fruits:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Apple is in the list")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Apple is not in the list")
</li>
<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 6: If-Elif-Else Statement</span>
<span class="annotate"># Variable</span> num = 7
<span class="annotate"># check the value of num</span> if num > 10:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Greater than 10")
<span class="annotate"># check if num is 10</span> elif num == 10:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Equal to 10")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Less than 10")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 7: If-Elif-Else Statement with Strings</span>
<span class="annotate"># Variable</span> color = "blue"
<span class="annotate"># check the color</span> if color == "red":
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Red color")
<span class="annotate"># check if color is blue</span> elif color == "blue":
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Blue color")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Other color")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 8: If-Else with a Boolean</span>
<span class="annotate"># Variable</span> is_raining = True
<span class="annotate"># check if it is raining</span> if is_raining:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Take an umbrella")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("No umbrella needed")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 9: If-Else with Age Check</span>
<span class="annotate"># Variable</span> age = 18
<span class="annotate"># check if the person is an adult</span> if age >= 18:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("You are an adult")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("You are not an adult")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 10: If-Else with Nested Condition</span>
<span class="annotate"># Variable</span> num = 15
<span class="annotate"># check if the number is positive</span> if num > 0:
<span class="annotate"># check if number is even</span> if num % 2 == 0:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Positive and Even")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Positive and Odd")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Non-positive number")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 11: If-Elif-Else with Grades</span>
<span class="annotate"># Variable</span> grade = 85
<span class="annotate"># check the grade</span> if grade >= 90:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("A grade")
<span class="annotate"># check if grade is between 80 and 89</span> elif grade >= 80:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("B grade")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("C grade")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 12: If-Else with a List Check</span>
<span class="annotate"># Variable</span> fruits = ["apple", "banana", "cherry"]
<span class="annotate"># check if "orange" is in the list</span> if "orange" in fruits:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Orange is in the list")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Orange is not in the list")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 13: If-Else with a String Length</span>
<span class="annotate"># Variable</span> message = "Hello World"
<span class="annotate"># check if the message length is greater than 10</span> if len(message) > 10:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Message is too long")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Message is just right")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 14: If-Else with Multiple Conditions</span>
<span class="annotate"># Variable</span> temperature = 25
<span class="annotate"># check if the temperature is between 20 and 30</span> if 20 <= temperature <= 30:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("The weather is warm")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("The weather is not warm")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 15: If-Else with User Input</span>
<span class="annotate"># Variable</span> user_input = int(input("Enter a number: "))
<span class="annotate"># check if the number is greater than 10</span> if user_input > 10:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("The number is greater than 10")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("The number is less than or equal to 10")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 16: If-Else with Boolean Expression</span>
<span class="annotate"># Variable</span> is_adult = False
<span class="annotate"># check if the person is an adult</span> if is_adult:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("You are an adult")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("You are not an adult")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 17: If-Else with Time Check</span>
<span class="annotate"># Variable</span> hour = 15
<span class="annotate"># check if it is day or night</span> if 6 <= hour < 18:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Good day!")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Good evening!")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 18: If-Else with Number Range</span>
<span class="annotate"># Variable</span> number = 50
<span class="annotate"># check if number is within a certain range</span> if 0 <= number <= 100:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("The number is in range")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("The number is out of range")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 19: If-Elif-Else with Days of the Week</span>
<span class="annotate"># Variable</span> day = "Monday"
<span class="annotate"># check the day of the week</span> if day == "Monday":
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Start of the week")
<span class="annotate"># check if day is Wednesday</span> elif day == "Wednesday":
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Midweek")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Another day")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 20: If-Else with Tuple</span>
<span class="annotate"># Variable</span> person = ("Alice", 25)
<span class="annotate"># check the name in the tuple</span> if person[0] == "Alice":
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Hello Alice!")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Who are you?")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 21: If-Elif-Else with Multiple Variables</span>
<span class="annotate"># Variable</span> x, y = 3, 5
<span class="annotate"># check x and y values</span> if x == 3 and y == 5:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("x is 3 and y is 5")
<span class="annotate"># check if x is 3 and y is 6</span> elif x == 3 and y == 6:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("x is 3 and y is 6")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Other combination")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 22: If-Else with Type Check</span>
<span class="annotate"># Variable</span> value = 10.5
<span class="annotate"># check the type of value</span> if isinstance(value, int):
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("It's an integer")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("It's not an integer")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 23: If-Else with a Dictionary Check</span>
<span class="annotate"># Variable</span> student = {"name": "John", "age": 20}
<span class="annotate"># check if the student has a name</span> if "name" in student:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Student name is", student["name"])
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Student name is not available")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 24: If-Else with Logical Operators</span>
<span class="annotate"># Variable</span> age = 25
<span class="annotate"># check if age is between 18 and 30</span> if 18 <= age <= 30:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Age is in the range 18 to 30")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Age is outside the range")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 25: If-Else with Comparison Operator</span>
<span class="annotate"># Variable</span> number = 100
<span class="annotate"># check if the number is greater than 50</span> if number > 50:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Greater than 50")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Less than or equal to 50")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 26: If-Else with a List Length</span>
<span class="annotate"># Variable</span> numbers = [1, 2, 3]
<span class="annotate"># check if the list is empty</span> if len(numbers) == 0:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("The list is empty")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("The list is not empty")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 27: If-Elif-Else with Range Check</span>
<span class="annotate"># Variable</span> temperature = 15
<span class="annotate"># check temperature range</span> if temperature < 10:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Cold weather")
<span class="annotate"># check if temperature is between 10 and 20</span> elif 10 <= temperature <= 20:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Mild weather")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Hot weather")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 28: If-Else with Float Check</span>
<span class="annotate"># Variable</span> number = 3.14
<span class="annotate"># check if the number is a float</span> if isinstance(number, float):
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print("The number is a float")
<span class="annotate"># print if false</span> else:
<span class="annotate"># print if false</span>&nbsp;&nbsp;&nbsp;&nbsp;print("The number is not a float")
</li>





<!-- More examples can be generated similarly for the remaining 28 variables -->



</ul>
  </li>

<li>
    <div class="link"><span class="material-symbols-outlined">
</span>Test Your Skills:if-elif-else<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu"style="margin-left:1%;width:98%;padding-left: 0px;padding-right: 0px;margin-right:-3%; background: #000;overflow:hidden;">
      
  



 <iframe src="mycompiler/testquizvariables.html"style="border-bottom-left-radius:0px;border-bottom-right-radius:0px;height:390px;top:0%;border:none; width:100%;overflow-x:hidden;overflow-y:auto;scrollbar-width: none;margin-left:0%;justify-content: center;"></iframe>

</span></li>
</li></ul>
  </li>

   <li>
    <div class="link"><span class="material-symbols-outlined">
</span>Iteration and Loops<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu">


 <li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 1: Simple For Loop</span>
<span class="annotate"># Variable</span> numbers = [1, 2, 3, 4, 5]
<span class="annotate"># iterate through the list</span> for num in numbers:
<span class="annotate"># print each number</span>&nbsp;&nbsp;&nbsp;&nbsp;print(num)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 2: For Loop with Range</span>
<span class="annotate"># Variable</span> n = 5
<span class="annotate"># iterate from 0 to 4</span> for i in range(n):
<span class="annotate"># print each iteration index</span>&nbsp;&nbsp;&nbsp;&nbsp;print(i)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 3: For Loop with Step</span>
<span class="annotate"># Variable</span> n = 10
<span class="annotate"># iterate with a step of 2</span> for i in range(0, n, 2):
<span class="annotate"># print each step</span>&nbsp;&nbsp;&nbsp;&nbsp;print(i)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 4: If-Else inside For Loop</span>
<span class="annotate"># Variable</span> numbers = [1, 2, 3, 4, 5]
<span class="annotate"># iterate through the list</span> for num in numbers:
<span class="annotate"># check if the number is even</span> if num % 2 == 0:
<span class="annotate"># print if even</span>&nbsp;&nbsp;&nbsp;&nbsp;print(f"{num} is even")
<span class="annotate"># print if odd</span> else:
<span class="annotate"># print if odd</span>&nbsp;&nbsp;&nbsp;&nbsp;print(f"{num} is odd")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 5: For Loop with Nested Loops</span>
<span class="annotate"># Variable</span> matrix = [[1, 2], [3, 4], [5, 6]]
<span class="annotate"># iterate through rows</span> for row in matrix:
<span class="annotate"># iterate through columns</span>&nbsp;&nbsp;&nbsp;&nbsp;for col in row:
<span class="annotate"># print each element</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(col)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 6: While Loop</span>
<span class="annotate"># Variable</span> count = 0
<span class="annotate"># run until count is less than 5</span> while count < 5:
<span class="annotate"># print count</span>&nbsp;&nbsp;&nbsp;&nbsp;print(count)
<span class="annotate"># increment count</span>&nbsp;&nbsp;&nbsp;&nbsp;count += 1
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 7: While Loop with Break</span>
<span class="annotate"># Variable</span> count = 0
<span class="annotate"># run until count reaches 3</span> while count < 5:
<span class="annotate"># check if count is 3</span> if count == 3:
<span class="annotate"># break out of the loop</span>&nbsp;&nbsp;&nbsp;&nbsp;break
<span class="annotate"># print count</span>&nbsp;&nbsp;&nbsp;&nbsp;print(count)
<span class="annotate"># increment count</span>&nbsp;&nbsp;&nbsp;&nbsp;count += 1
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 8: While Loop with Continue</span>
<span class="annotate"># Variable</span> count = 0
<span class="annotate"># run until count is less than 5</span> while count < 5:
<span class="annotate"># skip count 2</span> if count == 2:
<span class="annotate"># continue to the next iteration</span>&nbsp;&nbsp;&nbsp;&nbsp;continue
<span class="annotate"># print count</span>&nbsp;&nbsp;&nbsp;&nbsp;print(count)
<span class="annotate"># increment count</span>&nbsp;&nbsp;&nbsp;&nbsp;count += 1
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 9: For Loop with List Comprehension</span>
<span class="annotate"># Variable</span> numbers = [1, 2, 3, 4, 5]
<span class="annotate"># create a new list with squared numbers</span> squares = [num**2 for num in numbers]
<span class="annotate"># print the list of squares</span>&nbsp;&nbsp;&nbsp;&nbsp;print(squares)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 10: For Loop with Dictionary Iteration</span>
<span class="annotate"># Variable</span> data = {"a": 1, "b": 2, "c": 3}
<span class="annotate"># iterate through dictionary keys and values</span> for key, value in data.items():
<span class="annotate"># print key and value</span>&nbsp;&nbsp;&nbsp;&nbsp;print(f"{key}: {value}")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 11: For Loop with Index</span>
<span class="annotate"># Variable</span> names = ["Alice", "Bob", "Charlie"]
<span class="annotate"># iterate with index</span> for index, name in enumerate(names):
<span class="annotate"># print index and name</span>&nbsp;&nbsp;&nbsp;&nbsp;print(f"Index {index}: {name}")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 12: Nested While Loop</span>
<span class="annotate"># Variable</span> rows = 3
<span class="annotate"># variable for while loop</span> while rows > 0:
<span class="annotate"># print the row</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Row", rows)
<span class="annotate"># decrement rows</span>&nbsp;&nbsp;&nbsp;&nbsp;rows -= 1
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 13: For Loop with Else</span>
<span class="annotate"># Variable</span> numbers = [1, 2, 3, 4, 5]
<span class="annotate"># iterate through numbers</span> for num in numbers:
<span class="annotate"># check if number is even</span> if num % 2 == 0:
<span class="annotate"># print if even</span>&nbsp;&nbsp;&nbsp;&nbsp;print(f"{num} is even")
<span class="annotate"># execute when loop finishes without break</span> else:
<span class="annotate"># print else message</span>&nbsp;&nbsp;&nbsp;&nbsp;print(f"{num} is odd")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 14: While Loop with Else</span>
<span class="annotate"># Variable</span> count = 0
<span class="annotate"># loop until count reaches 5</span> while count < 5:
<span class="annotate"># print count</span>&nbsp;&nbsp;&nbsp;&nbsp;print(count)
<span class="annotate"># increment count</span>&nbsp;&nbsp;&nbsp;&nbsp;count += 1
<span class="annotate"># execute after the while loop ends</span> else:
<span class="annotate"># print when while loop is finished</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Finished counting!")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 15: Infinite While Loop</span>
<span class="annotate"># Variable</span> count = 0
<span class="annotate"># infinite loop</span> while True:
<span class="annotate"># print the count</span>&nbsp;&nbsp;&nbsp;&nbsp;print(count)
<span class="annotate"># break after 5 iterations</span> if count == 5:
<span class="annotate"># break the loop</span>&nbsp;&nbsp;&nbsp;&nbsp;break
<span class="annotate"># increment count</span>&nbsp;&nbsp;&nbsp;&nbsp;count += 1
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 16: For Loop with Multiple Conditions</span>
<span class="annotate"># Variable</span> numbers = [1, 2, 3, 4, 5, 6]
<span class="annotate"># iterate through numbers</span> for num in numbers:
<span class="annotate"># check if even and divisible by 3</span> if num % 2 == 0 and num % 3 == 0:
<span class="annotate"># print if true</span>&nbsp;&nbsp;&nbsp;&nbsp;print(f"{num} is divisible by both 2 and 3")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 17: For Loop with Continue</span>
<span class="annotate"># Variable</span> numbers = [1, 2, 3, 4, 5]
<span class="annotate"># iterate through numbers</span> for num in numbers:
<span class="annotate"># skip 3</span> if num == 3:
<span class="annotate"># continue with next iteration</span>&nbsp;&nbsp;&nbsp;&nbsp;continue
<span class="annotate"># print number</span>&nbsp;&nbsp;&nbsp;&nbsp;print(num)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 18: For Loop with Reverse</span>
<span class="annotate"># Variable</span> numbers = [1, 2, 3, 4, 5]
<span class="annotate"># iterate in reverse order</span> for num in reversed(numbers):
<span class="annotate"># print number</span>&nbsp;&nbsp;&nbsp;&nbsp;print(num)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 19: List Comprehension with If</span>
<span class="annotate"># Variable</span> numbers = [1, 2, 3, 4, 5, 6]
<span class="annotate"># create a new list of even numbers</span> evens = [num for num in numbers if num % 2 == 0]
<span class="annotate"># print list of even numbers</span>&nbsp;&nbsp;&nbsp;&nbsp;print(evens)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 20: For Loop with String</span>
<span class="annotate"># Variable</span> text = "Python"
<span class="annotate"># iterate through characters in the string</span> for char in text:
<span class="annotate"># print each character</span>&nbsp;&nbsp;&nbsp;&nbsp;print(char)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 21: Nested For Loop with Range</span>
<span class="annotate"># Variable</span> n = 3
<span class="annotate"># outer loop</span> for i in range(n):
<span class="annotate"># inner loop</span>&nbsp;&nbsp;&nbsp;&nbsp;for j in range(n):
<span class="annotate"># print coordinates</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f"({i},{j})")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 22: For Loop with Tuple Unpacking</span>
<span class="annotate"># Variable</span> pairs = [(1, 'a'), (2, 'b'), (3, 'c')]
<span class="annotate"># unpack tuple into two variables</span> for num, char in pairs:
<span class="annotate"># print each pair</span>&nbsp;&nbsp;&nbsp;&nbsp;print(f"{num}: {char}")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 23: While Loop with Counter</span>
<span class="annotate"># Variable</span> counter = 0
<span class="annotate"># while loop until counter reaches 5</span> while counter < 5:
<span class="annotate"># print counter</span>&nbsp;&nbsp;&nbsp;&nbsp;print(counter)
<span class="annotate"># increment counter</span>&nbsp;&nbsp;&nbsp;&nbsp;counter += 1
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 24: For Loop with a Set</span>
<span class="annotate"># Variable</span> items = {1, 2, 3, 4, 5}
<span class="annotate"># iterate through set</span> for item in items:
<span class="annotate"># print each item</span>&nbsp;&nbsp;&nbsp;&nbsp;print(item)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 25: For Loop with Dictionary Keys</span>
<span class="annotate"># Variable</span> data = {"name": "Alice", "age": 25, "city": "Wonderland"}
<span class="annotate"># iterate through dictionary keys</span> for key in data:
<span class="annotate"># print each key</span>&nbsp;&nbsp;&nbsp;&nbsp;print(key)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 26: While Loop with Flag</span>
<span class="annotate"># Variable</span> found = False
<span class="annotate"># while loop to check if flag is set</span> while not found:
<span class="annotate"># check condition</span>&nbsp;&nbsp;&nbsp;&nbsp;if some_condition:
<span class="annotate"># set flag</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found = True
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 27: For Loop with Sorted List</span>
<span class="annotate"># Variable</span> numbers = [3, 1, 4, 5, 2]
<span class="annotate"># iterate through sorted list</span> for num in sorted(numbers):
<span class="annotate"># print each number</span>&nbsp;&nbsp;&nbsp;&nbsp;print(num)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 28: For Loop with Multiple Lists</span>
<span class="annotate"># Variable</span> list1 = [1, 2, 3]
<span class="annotate"># Variable</span> list2 = ['a', 'b', 'c']
<span class="annotate"># iterate through both lists</span> for num, char in zip(list1, list2):
<span class="annotate"># print number and character</span>&nbsp;&nbsp;&nbsp;&nbsp;print(f"{num}: {char}")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 29: Break Out of Nested Loop</span>
<span class="annotate"># Variable</span> matrix = [[1, 2], [3, 4], [5, 6]]
<span class="annotate"># iterate through rows</span> for row in matrix:
<span class="annotate"># iterate through columns</span>&nbsp;&nbsp;&nbsp;&nbsp;for num in row:
<span class="annotate"># break when number equals 4</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if num == 4:
<span class="annotate"># break both loops</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 30: Loop with Try-Except</span>
<span class="annotate"># Variable</span> numbers = [1, 'a', 2, 'b', 3]
<span class="annotate"># iterate through the list</span> for num in numbers:
<span class="annotate"># try to square the number</span> try:
<span class="annotate"># print square</span>&nbsp;&nbsp;&nbsp;&nbsp;print(num ** 2)
<span class="annotate"># handle exception if not a number</span> except TypeError:
<span class="annotate"># print error message</span>&nbsp;&nbsp;&nbsp;&nbsp;print(f"{num} is not a number")
</li>
<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 31: Basic While Loop</span>
<span class="annotate"># Variable</span> counter = 1
<span class="annotate"># while loop that prints numbers from 1 to 5</span> while counter <= 5:
<span class="annotate"># print counter value</span>&nbsp;&nbsp;&nbsp;&nbsp;print(counter)
<span class="annotate"># increment counter</span> counter += 1
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 32: While Loop with Break</span>
<span class="annotate"># Variable</span> counter = 1
<span class="annotate"># while loop with break condition</span> while counter <= 5:
<span class="annotate"># check if counter is 3 to break loop</span> if counter == 3:
<span class="annotate"># break the loop</span>&nbsp;&nbsp;&nbsp;&nbsp;break
<span class="annotate"># print counter value</span> print(counter)
<span class="annotate"># increment counter</span> counter += 1
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 33: While Loop with Else</span>
<span class="annotate"># Variable</span> counter = 1
<span class="annotate"># while loop that ends normally</span> while counter <= 5:
<span class="annotate"># print counter value</span>&nbsp;&nbsp;&nbsp;&nbsp;print(counter)
<span class="annotate"># increment counter</span> counter += 1
<span class="annotate"># else executed after loop finishes</span> else:
<span class="annotate"># print when loop ends</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Loop finished")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 34: While Loop with Continue</span>
<span class="annotate"># Variable</span> counter = 1
<span class="annotate"># while loop with continue condition</span> while counter <= 5:
<span class="annotate"># skip printing when counter is 3</span> if counter == 3:
<span class="annotate"># increment counter and continue</span>&nbsp;&nbsp;&nbsp;&nbsp;counter += 1
<span class="annotate"># continue loop without printing</span>&nbsp;&nbsp;&nbsp;&nbsp;continue
<span class="annotate"># print counter value</span> print(counter)
<span class="annotate"># increment counter</span> counter += 1
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 35: Infinite While Loop</span>
<span class="annotate"># Variable</span> counter = 1
<span class="annotate"># infinite while loop until counter exceeds 10</span> while True:
<span class="annotate"># print counter value</span>&nbsp;&nbsp;&nbsp;&nbsp;print(counter)
<span class="annotate"># increment counter</span> counter += 1
<span class="annotate"># break loop after counter exceeds 10</span> if counter > 10:
<span class="annotate"># break the loop</span>&nbsp;&nbsp;&nbsp;&nbsp;break
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 36: While Loop with User Input</span>
<span class="annotate"># Variable</span> user_input = ""
<span class="annotate"># while loop until 'stop' is entered</span> while user_input != "stop":
<span class="annotate"># prompt for user input</span>&nbsp;&nbsp;&nbsp;&nbsp;user_input = input("Enter 'stop' to stop the loop: ")
<span class="annotate"># print the input</span>&nbsp;&nbsp;&nbsp;&nbsp;print(f"You entered: {user_input}")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 37: While Loop for Summation</span>
<span class="annotate"># Variable</span> total = 0
<span class="annotate"># prompt user for input</span> num = int(input("Enter a number (0 to stop): "))
<span class="annotate"># while loop until 0 is entered</span> while num != 0:
<span class="annotate"># add to total</span>&nbsp;&nbsp;&nbsp;&nbsp;total += num
<span class="annotate"># prompt again</span> num = int(input("Enter a number (0 to stop): "))
<span class="annotate"># print the total sum</span> print(f"Total sum: {total}")
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 38: While Loop with a List</span>
<span class="annotate"># Variable</span> my_list = [1, 2, 3, 4, 5]
<span class="annotate"># Variable</span> index = 0
<span class="annotate"># while loop to iterate through list</span> while index < len(my_list):
<span class="annotate"># print list element</span>&nbsp;&nbsp;&nbsp;&nbsp;print(my_list[index])
<span class="annotate"># increment index</span> index += 1
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 39: Nested While Loop</span>
<span class="annotate"># Variable</span> row = 1
<span class="annotate"># while loop for rows</span> while row <= 3:
<span class="annotate"># Variable</span> col = 1
<span class="annotate"># nested while loop for columns</span> while col <= 3:
<span class="annotate"># print product of row and col</span>&nbsp;&nbsp;&nbsp;&nbsp;print(row * col, end=" ")
<span class="annotate"># increment column</span> col += 1
<span class="annotate"># new line after each row</span> print()
<span class="annotate"># increment row</span> row += 1
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 40: While Loop with a Flag</span>
<span class="annotate"># Variable</span> flag = True
<span class="annotate"># Variable</span> counter = 1
<span class="annotate"># while loop with flag condition</span> while flag:
<span class="annotate"># print counter value</span>&nbsp;&nbsp;&nbsp;&nbsp;print(counter)
<span class="annotate"># increment counter</span> counter += 1
<span class="annotate"># change flag condition</span> if counter > 5:
<span class="annotate"># set flag to False</span>&nbsp;&nbsp;&nbsp;&nbsp;flag = False
</li>



<!-- More examples can be generated similarly for the remaining 28 variables -->



</ul>
  </li>

<li>
    <div class="link"><span class="material-symbols-outlined">
</span>Test Your Skills:Iteration and Loops<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu"style="margin-left:1%;width:98%;padding-left: 0px;padding-right: 0px;margin-right:-3%; background: #000;overflow:hidden;">
      
  



 <iframe src="mycompiler/testquizvariables.html"style="border-bottom-left-radius:0px;border-bottom-right-radius:0px;height:390px;top:0%;border:none; width:100%;overflow-x:hidden;overflow-y:auto;scrollbar-width: none;margin-left:0%;justify-content: center;"></iframe>

</span></li>
</li></ul>
  </li>


   <li>
    <div class="link"><span class="material-symbols-outlined">
</span>Python Functions<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu">


      
<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 1: Simple Function</span>
<span class="annotate"># Define a function</span>def greet():
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Hello, World!")
<span class="annotate"># Call a function</span>greet()</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 2: Function with Parameters</span>
<span class="annotate"># Define a function with parameters</span>def greet(name):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Hello, " + name + "!")
<span class="annotate"># Call a function</span>greet("Alice")</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 3: Function with Return Value</span>
<span class="annotate"># Define a function with a return value</span>def add(a, b):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return a + b
<span class="annotate"># Call a function</span>result = add(5, 3)
<span class="annotate"># Print result</span>print(result)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 4: Function with Default Argument</span>
<span class="annotate"># Define a function with default argument</span>def greet(name="Guest"):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Hello, " + name + "!")
<span class="annotate"># Call a function</span>greet()
<span class="annotate"># Call a function with argument</span>greet("Bob")</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 5: Function with Variable Number of Arguments</span>
<span class="annotate"># Define a function with variable arguments</span>def print_numbers(*args):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;for num in args:
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(num)
<span class="annotate"># Call a function</span>print_numbers(1, 2, 3, 4, 5)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 6: Function with Keyword Arguments</span>
<span class="annotate"># Define a function with keyword arguments</span>def display_info(name, age):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;print("Name: " + name + ", Age: " + str(age))
<span class="annotate"># Call a function with keyword arguments</span>display_info(name="Alice", age=30)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 7: Function with Arbitrary Keyword Arguments</span>
<span class="annotate"># Define a function with arbitrary keyword arguments</span>def display_details(**kwargs):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;for key, value in kwargs.items():
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(key + ": " + str(value))
<span class="annotate"># Call a function with arbitrary keyword arguments</span>display_details(name="John", age=25, city="New York")</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 8: Recursive Function</span>
<span class="annotate"># Define a recursive function</span>def factorial(n):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;if n == 1:
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;else:
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return n * factorial(n-1)
<span class="annotate"># Call a function</span>print(factorial(5))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 9: Lambda Function</span>
<span class="annotate"># Define a lambda function</span>add = lambda a, b: a + b
<span class="annotate"># Call the lambda function</span>print(add(2, 3))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 10: Function with Multiple Return Values</span>
<span class="annotate"># Define a function with multiple return values</span>def divide(a, b):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return a // b, a % b
<span class="annotate"># Call a function and store multiple return values</span>quotient, remainder = divide(10, 3)
<span class="annotate"># Print result</span>print("Quotient: " + str(quotient) + ", Remainder: " + str(remainder))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 11: Function to Check Even or Odd</span>
<span class="annotate"># Define a function to check even or odd</span>def check_even_odd(number):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;if number % 2 == 0:
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(str(number) + " is even")
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;else:
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(str(number) + " is odd")
<span class="annotate"># Call a function</span>check_even_odd(4)</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 12: Function with String Argument</span>
<span class="annotate"># Define a function with string argument</span>def string_length(s):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return len(s)
<span class="annotate"># Call a function</span>print(string_length("Hello"))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 13: Function to Find Maximum of Two Numbers</span>
<span class="annotate"># Define a function to find the maximum</span>def max_of_two(a, b):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;if a > b:
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return a
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;else:
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return b
<span class="annotate"># Call a function</span>print(max_of_two(4, 7))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 14: Function to Check Palindrome</span>
<span class="annotate"># Define a function to check palindrome</span>def is_palindrome(s):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return s == s[::-1]
<span class="annotate"># Call a function</span>print(is_palindrome("racecar"))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 15: Function to Count Vowels</span>
<span class="annotate"># Define a function to count vowels</span>def count_vowels(s):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;vowels = "aeiou"
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;count = 0
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;for char in s:
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if char.lower() in vowels:
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count += 1
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return count
<span class="annotate"># Call a function</span>print(count_vowels("hello"))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 16: Function to Reverse a String</span>
<span class="annotate"># Define a function to reverse a string</span>def reverse_string(s):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return s[::-1]
<span class="annotate"># Call a function</span>print(reverse_string("hello"))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 17: Function to Calculate Factorial</span>
<span class="annotate"># Define a function to calculate factorial</span>def factorial(n):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;if n == 0:
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;else:
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return n * factorial(n - 1)
<span class="annotate"># Call a function</span>print(factorial(5))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 18: Function to Count Words in a Sentence</span>
<span class="annotate"># Define a function to count words</span>def count_words(sentence):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return len(sentence.split())
<span class="annotate"># Call a function</span>print(count_words("Hello world, this is Python"))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 19: Function to Check Prime Number</span>
<span class="annotate"># Define a function to check prime number</span>def is_prime(n):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;if n <= 1:
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return False
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;for i in range(2, int(n ** 0.5) + 1):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if n % i == 0:
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return False
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return True
<span class="annotate"># Call a function</span>print(is_prime(11))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 20: Function to Convert Celsius to Fahrenheit</span>
<span class="annotate"># Define a function to convert Celsius to Fahrenheit</span>def celsius_to_fahrenheit(celsius):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return (celsius * 9/5) + 32
<span class="annotate"># Call a function</span>print(celsius_to_fahrenheit(0))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 21: Function to Sum List Elements</span>
<span class="annotate"># Define a function to sum elements in a list</span>def sum_list(lst):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return sum(lst)
<span class="annotate"># Call a function</span>print(sum_list([1, 2, 3, 4, 5]))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 22: Function to Sort List</span>
<span class="annotate"># Define a function to sort a list</span>def sort_list(lst):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return sorted(lst)
<span class="annotate"># Call a function</span>print(sort_list([5, 2, 8, 1, 4]))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 23: Function to Find GCD of Two Numbers</span>
<span class="annotate"># Define a function to find GCD</span>def gcd(a, b):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;while b:
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a, b = b, a % b
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return a
<span class="annotate"># Call a function</span>print(gcd(56, 98))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 24: Function to Find LCM of Two Numbers</span>
<span class="annotate"># Define a function to find LCM</span>def lcm(a, b):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return abs(a*b) // gcd(a, b)
<span class="annotate"># Call a function</span>print(lcm(4, 5))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 25: Function to Convert Fahrenheit to Celsius</span>
<span class="annotate"># Define a function to convert Fahrenheit to Celsius</span>def fahrenheit_to_celsius(fahrenheit):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return (fahrenheit - 32) * 5/9
<span class="annotate"># Call a function</span>print(fahrenheit_to_celsius(32))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 26: Function to Find Square Root</span>
<span class="annotate"># Define a function to find square root</span>import math
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;def square_root(n):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return math.sqrt(n)
<span class="annotate"># Call a function</span>print(square_root(16))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 27: Function to Return Unique Elements from List</span>
<span class="annotate"># Define a function to get unique elements</span>def unique_elements(lst):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return list(set(lst))
<span class="annotate"># Call a function</span>print(unique_elements([1, 2, 2, 3, 4, 4]))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 28: Function to Reverse List</span>
<span class="annotate"># Define a function to reverse a list</span>def reverse_list(lst):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return lst[::-1]
<span class="annotate"># Call a function</span>print(reverse_list([1, 2, 3]))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 29: Function to Count Occurrences of an Item in List</span>
<span class="annotate"># Define a function to count occurrences</span>def count_occurrences(lst, item):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return lst.count(item)
<span class="annotate"># Call a function</span>print(count_occurrences([1, 2, 2, 3], 2))</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 30: Function to Find Intersection of Two Lists</span>
<span class="annotate"># Define a function to find intersection</span>def intersection(lst1, lst2):
<span class="annotate"># Function Statement</span>&nbsp;&nbsp;&nbsp;&nbsp;return list(set(lst1) & set(lst2))
<span class="annotate"># Call a function</span>print(intersection([1, 2, 3], [2, 3, 4]))</li>




<!-- More examples can be generated similarly for the remaining 28 variables -->



</ul>
  </li>

<li>
    <div class="link"><span class="material-symbols-outlined">
</span>Test Your Skills:Python Functions<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu"style="margin-left:1%;width:98%;padding-left: 0px;padding-right: 0px;margin-right:-3%; background: #000;overflow:hidden;">
      
  



 <iframe src="mycompiler/testquizvariables.html"style="border-bottom-left-radius:0px;border-bottom-right-radius:0px;height:390px;top:0%;border:none; width:100%;overflow-x:hidden;overflow-y:auto;scrollbar-width: none;margin-left:0%;justify-content: center;"></iframe>

</span></li>
</li></ul>
  </li>

   <li>
    <div class="link"><span class="material-symbols-outlined">
</span>Python Lists<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu">


      
<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 1: Creating a List</span>
<span class="annotate"># create a simple list</span>my_list = [1, 2, 3, 4, 5]
<span class="annotate"># print the list</span>print(my_list)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 2: Accessing List Elements</span>
<span class="annotate"># create a list</span>my_list = ['apple', 'banana', 'cherry']
<span class="annotate"># access the second element</span>print(my_list[1])
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 3: Adding an Element to a List</span>
<span class="annotate"># create a list</span>my_list = [1, 2, 3]
<span class="annotate"># add an element to the list</span>my_list.append(4)
<span class="annotate"># print the updated list</span>print(my_list)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 4: Inserting an Element at a Specific Position</span>
<span class="annotate"># create a list</span>my_list = [1, 2, 4, 5]
<span class="annotate"># insert an element at the second position</span>my_list.insert(1, 3)
<span class="annotate"># print the updated list</span>print(my_list)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 5: Removing an Element from a List</span>
<span class="annotate"># create a list</span>my_list = [1, 2, 3, 4]
<span class="annotate"># remove the element '3'</span>my_list.remove(3)
<span class="annotate"># print the updated list</span>print(my_list)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 6: Popping an Element from a List</span>
<span class="annotate"># create a list</span>my_list = [1, 2, 3, 4]
<span class="annotate"># pop the last element</span>popped_item = my_list.pop()
<span class="annotate"># print the popped item and the updated list</span>print(popped_item, my_list)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 7: Slicing a List</span>
<span class="annotate"># create a list</span>my_list = [1, 2, 3, 4, 5]
<span class="annotate"># slice the first three elements</span>print(my_list[:3])
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 8: Length of a List</span>
<span class="annotate"># create a list</span>my_list = [10, 20, 30, 40]
<span class="annotate"># print the length of the list</span>print(len(my_list))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 9: List Concatenation</span>
<span class="annotate"># create two lists</span>list1 = [1, 2, 3]
<span class="annotate"># concatenate the lists</span>list2 = list1 + [4, 5, 6]
<span class="annotate"># print the concatenated list</span>print(list2)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 10: List Repetition</span>
<span class="annotate"># create a list</span>my_list = [1, 2]
<span class="annotate"># repeat the list 3 times</span>print(my_list * 3)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 11: List Comprehension</span>
<span class="annotate"># create a list with comprehension</span>my_list = [x**2 for x in range(1, 6)]
<span class="annotate"># print the list</span>print(my_list)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 12: Checking if an Element Exists in a List</span>
<span class="annotate"># create a list</span>my_list = [1, 2, 3, 4, 5]
<span class="annotate"># check if '3' exists in the list</span>print(3 in my_list)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 13: Iterating Through a List</span>
<span class="annotate"># create a list</span>my_list = ['apple', 'banana', 'cherry']
<span class="annotate"># iterate through the list</span>for item in my_list:
<span class="annotate"># print each item</span>&nbsp;&nbsp;&nbsp;&nbsp;print(item)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 14: Nested Lists</span>
<span class="annotate"># create a nested list</span>my_list = [[1, 2], [3, 4], [5, 6]]
<span class="annotate"># access the first element of the second list</span>print(my_list[1][0])
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 15: List of Lists and Iteration</span>
<span class="annotate"># create a list of lists</span>my_list = [[1, 2], [3, 4], [5, 6]]
<span class="annotate"># iterate through the list of lists</span>for sublist in my_list:
<span class="annotate"># iterate through each sublist</span>&nbsp;&nbsp;&nbsp;&nbsp;for item in sublist:
<span class="annotate"># print each item</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(item)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 16: Sorting a List</span>
<span class="annotate"># create a list</span>my_list = [3, 1, 4, 5, 2]
<span class="annotate"># sort the list</span>my_list.sort()
<span class="annotate"># print the sorted list</span>print(my_list)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 17: Reversing a List</span>
<span class="annotate"># create a list</span>my_list = [1, 2, 3, 4, 5]
<span class="annotate"># reverse the list</span>my_list.reverse()
<span class="annotate"># print the reversed list</span>print(my_list)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 18: Removing an Element by Index</span>
<span class="annotate"># create a list</span>my_list = [1, 2, 3, 4, 5]
<span class="annotate"># remove the element at index 2</span>my_list.pop(2)
<span class="annotate"># print the updated list</span>print(my_list)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 19: List with Mixed Data Types</span>
<span class="annotate"># create a list with mixed data types</span>my_list = [1, 'apple', 3.14, True]
<span class="annotate"># print the list</span>print(my_list)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 20: Concatenating Two Lists</span>
<span class="annotate"># create two lists</span>list1 = [1, 2, 3]
<span class="annotate"># concatenate the two lists</span>list2 = list1 + [4, 5, 6]
<span class="annotate"># print the concatenated list</span>print(list2)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 21: Checking List Length</span>
<span class="annotate"># create a list</span>my_list = [1, 2, 3, 4]
<span class="annotate"># check the length of the list</span>print(len(my_list))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 22: List with Nested Loops</span>
<span class="annotate"># create a list</span>my_list = [[1, 2], [3, 4], [5, 6]]
<span class="annotate"># iterate through the list</span>for sublist in my_list:
<span class="annotate"># iterate through each sublist</span>&nbsp;&nbsp;&nbsp;&nbsp;for item in sublist:
<span class="annotate"># print each item</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(item)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 23: List Comprehension with Condition</span>
<span class="annotate"># create a list with even numbers</span>my_list = [x for x in range(10) if x % 2 == 0]
<span class="annotate"># print the list</span>print(my_list)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 24: List with Duplicate Elements</span>
<span class="annotate"># create a list with duplicates</span>my_list = [1, 2, 2, 3, 4, 4]
<span class="annotate"># print the list with duplicates</span>print(my_list)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 25: List with Range Function</span>
<span class="annotate"># create a list using range function</span>my_list = list(range(1, 6))
<span class="annotate"># print the list</span>print(my_list)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 26: Find Maximum Value in a List</span>
<span class="annotate"># create a list</span>my_list = [1, 3, 7, 2, 5]
<span class="annotate"># find the maximum value</span>print(max(my_list))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 27: List Slicing with Negative Indices</span>
<span class="annotate"># create a list</span>my_list = [1, 2, 3, 4, 5]
<span class="annotate"># slice the last three elements</span>print(my_list[-3:])
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 28: List of Dictionaries</span>
<span class="annotate"># create a list of dictionaries</span>my_list = [{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Charlie'}]
<span class="annotate"># print the list</span>print(my_list)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 29: List with Different Data Types</span>
<span class="annotate"># create a list with different data types</span>my_list = [1, 'apple', 3.14, [1, 2, 3], True]
<span class="annotate"># print the list</span>print(my_list)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 30: List Unpacking</span>
<span class="annotate"># create a list</span>my_list = [1, 2, 3]
<span class="annotate"># unpack the list</span>a, b, c = my_list
<span class="annotate"># print the unpacked elements</span>print(a, b, c)
</li>


<!-- More examples can be generated similarly for the remaining 28 variables -->



</ul>
  </li>

<li>
    <div class="link"><span class="material-symbols-outlined">
</span>Test Your Skills:Python Lists<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu"style="margin-left:1%;width:98%;padding-left: 0px;padding-right: 0px;margin-right:-3%; background: #000;overflow:hidden;">
      
  



 <iframe src="mycompiler/testquizvariables.html"style="border-bottom-left-radius:0px;border-bottom-right-radius:0px;height:390px;top:0%;border:none; width:100%;overflow-x:hidden;overflow-y:auto;scrollbar-width: none;margin-left:0%;justify-content: center;"></iframe>

</span></li>
</li></ul>
  </li>

   <li>
    <div class="link"><span class="material-symbols-outlined">
</span>Python Dictionary<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu">


      
<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 1: Creating a Dictionary</span>
<span class="annotate"># create a dictionary</span>my_dict = {'name': 'Alice', 'age': 25}
<span class="annotate"># print the dictionary</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 2: Accessing Dictionary Values</span>
<span class="annotate"># create a dictionary</span>my_dict = {'name': 'Alice', 'age': 25}
<span class="annotate"># access the value of 'name'</span>print(my_dict['name'])
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 3: Adding a Key-Value Pair to a Dictionary</span>
<span class="annotate"># create a dictionary</span>my_dict = {'name': 'Alice'}
<span class="annotate"># add a new key-value pair</span>my_dict['age'] = 25
<span class="annotate"># print the updated dictionary</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 4: Removing a Key-Value Pair from a Dictionary</span>
<span class="annotate"># create a dictionary</span>my_dict = {'name': 'Alice', 'age': 25}
<span class="annotate"># remove the key 'age'</span>my_dict.pop('age')
<span class="annotate"># print the updated dictionary</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 5: Using the get() Method</span>
<span class="annotate"># create a dictionary</span>my_dict = {'name': 'Alice', 'age': 25}
<span class="annotate"># get the value of 'age'</span>print(my_dict.get('age'))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 6: Checking if a Key Exists</span>
<span class="annotate"># create a dictionary</span>my_dict = {'name': 'Alice', 'age': 25}
<span class="annotate"># check if 'name' exists</span>print('name' in my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 7: Iterating Through a Dictionary</span>
<span class="annotate"># create a dictionary</span>my_dict = {'name': 'Alice', 'age': 25}
<span class="annotate"># iterate through the dictionary</span>for key, value in my_dict.items():
<span class="annotate"># print each key and value</span>&nbsp;&nbsp;&nbsp;&nbsp;print(key, value)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 8: Merging Two Dictionaries</span>
<span class="annotate"># create two dictionaries</span>dict1 = {'name': 'Alice'}
<span class="annotate"># merge with another dictionary</span>dict2 = {'age': 25}
<span class="annotate"># update dict1 with dict2</span>dict1.update(dict2)
<span class="annotate"># print the merged dictionary</span>print(dict1)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 9: Dictionary with Multiple Data Types</span>
<span class="annotate"># create a dictionary with different data types</span>my_dict = {'name': 'Alice', 'age': 25, 'is_student': True}
<span class="annotate"># print the dictionary</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 10: Dictionary with Nested Dictionaries</span>
<span class="annotate"># create a nested dictionary</span>my_dict = {'person1': {'name': 'Alice', 'age': 25}, 'person2': {'name': 'Bob', 'age': 30}}
<span class="annotate"># print the nested dictionary</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 11: Dictionary with List as Values</span>
<span class="annotate"># create a dictionary with lists as values</span>my_dict = {'fruits': ['apple', 'banana'], 'vegetables': ['carrot', 'spinach']}
<span class="annotate"># print the dictionary</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 12: Using setdefault() Method</span>
<span class="annotate"># create a dictionary</span>my_dict = {'name': 'Alice'}
<span class="annotate"># use setdefault to add a key-value pair if key does not exist</span>my_dict.setdefault('age', 25)
<span class="annotate"># print the updated dictionary</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 13: Copying a Dictionary</span>
<span class="annotate"># create a dictionary</span>my_dict = {'name': 'Alice', 'age': 25}
<span class="annotate"># make a shallow copy of the dictionary</span>new_dict = my_dict.copy()
<span class="annotate"># print the copied dictionary</span>print(new_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 14: Dictionary with Tuple as Key</span>
<span class="annotate"># create a dictionary with tuple keys</span>my_dict = {('name', 'age'): 'Alice'}
<span class="annotate"># print the dictionary</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 15: Dictionary Comprehension</span>
<span class="annotate"># create a dictionary using comprehension</span>my_dict = {x: x**2 for x in range(5)}
<span class="annotate"># print the dictionary</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 16: Dictionary with Boolean Values</span>
<span class="annotate"># create a dictionary with boolean values</span>my_dict = {'is_active': True, 'is_verified': False}
<span class="annotate"># print the dictionary</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 17: Dictionary with Mixed Key Types</span>
<span class="annotate"># create a dictionary with mixed key types</span>my_dict = {1: 'one', 'two': 2, (3, 4): 'three_four'}
<span class="annotate"># print the dictionary</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 18: Using popitem() Method</span>
<span class="annotate"># create a dictionary</span>my_dict = {'name': 'Alice', 'age': 25}
<span class="annotate"># pop a key-value pair</span>key_value = my_dict.popitem()
<span class="annotate"># print the popped item and the updated dictionary</span>print(key_value, my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 19: Getting All Keys of a Dictionary</span>
<span class="annotate"># create a dictionary</span>my_dict = {'name': 'Alice', 'age': 25}
<span class="annotate"># get all the keys</span>print(my_dict.keys())
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 20: Getting All Values of a Dictionary</span>
<span class="annotate"># create a dictionary</span>my_dict = {'name': 'Alice', 'age': 25}
<span class="annotate"># get all the values</span>print(my_dict.values())
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 21: Using the fromkeys() Method</span>
<span class="annotate"># create a dictionary with fromkeys</span>keys = ['name', 'age']
<span class="annotate"># assign a default value</span>my_dict = dict.fromkeys(keys, 'Unknown')
<span class="annotate"># print the dictionary</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 22: Dictionary with None as Value</span>
<span class="annotate"># create a dictionary with None as value</span>my_dict = {'name': None, 'age': 25}
<span class="annotate"># print the dictionary</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 23: Nested Dictionary Update</span>
<span class="annotate"># create a nested dictionary</span>my_dict = {'person1': {'name': 'Alice', 'age': 25}}
<span class="annotate"># update a nested key-value pair</span>my_dict['person1']['age'] = 26
<span class="annotate"># print the updated dictionary</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 24: Dictionary with Set as Value</span>
<span class="annotate"># create a dictionary with sets as values</span>my_dict = {'fruits': {'apple', 'banana'}, 'vegetables': {'carrot', 'spinach'}}
<span class="annotate"># print the dictionary</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 25: Dictionary with Conditional Update</span>
<span class="annotate"># create a dictionary</span>my_dict = {'name': 'Alice', 'age': 25}
<span class="annotate"># update 'age' conditionally</span>if my_dict.get('age') < 30: my_dict['status'] = 'young'
<span class="annotate"># print the updated dictionary</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 26: Dictionary with List as a Key</span>
<span class="annotate"># create a dictionary with list as key (not allowed)</span>my_dict = {['name', 'age']: 'Alice'}
<span class="annotate"># print the dictionary (will cause an error)</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 27: Dictionary with Integer as Key</span>
<span class="annotate"># create a dictionary with integer keys</span>my_dict = {1: 'one', 2: 'two'}
<span class="annotate"># print the dictionary</span>print(my_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 28: Dictionary Merge Using `|` Operator (Python 3.9+)</span>
<span class="annotate"># create two dictionaries</span>dict1 = {'name': 'Alice'}
<span class="annotate"># merge using `|` operator</span>dict2 = {'age': 25}
<span class="annotate"># merged dictionary</span>merged_dict = dict1 | dict2
<span class="annotate"># print the merged dictionary</span>print(merged_dict)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 29: Dictionary with Function as Value</span>
<span class="annotate"># create a dictionary with functions as values</span>my_dict = {'greet': lambda name: f"Hello {name}"}
<span class="annotate"># call the function stored in the dictionary</span>print(my_dict['greet']('Alice'))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 30: Dictionary with Boolean Operations</span>
<span class="annotate"># create a dictionary with boolean operations</span>my_dict = {'is_raining': False, 'is_sunny': True}
<span class="annotate"># check if both conditions are true</span>print(my_dict['is_raining'] and my_dict['is_sunny'])
</li>


<!-- More examples can be generated similarly for the remaining 28 variables -->



</ul>
  </li>

<li>
    <div class="link"><span class="material-symbols-outlined">
</span>Test Your Skills:Python Dictionaries<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu"style="margin-left:1%;width:98%;padding-left: 0px;padding-right: 0px;margin-right:-3%; background: #000;overflow:hidden;">
      
  



 <iframe src="mycompiler/testquizvariables.html"style="border-bottom-left-radius:0px;border-bottom-right-radius:0px;height:390px;top:0%;border:none; width:100%;overflow-x:hidden;overflow-y:auto;scrollbar-width: none;margin-left:0%;justify-content: center;"></iframe>

</span></li>
</li></ul>
  </li>

   <li>
    <div class="link"><span class="material-symbols-outlined">
</span>Python Sets<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu">


      
<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 1: Creating a Set</span>
<span class="annotate"># create a set</span>my_set = {1, 2, 3, 4}
<span class="annotate"># print the set</span>print(my_set)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 2: Adding an Element to a Set</span>
<span class="annotate"># create a set</span>my_set = {1, 2, 3}
<span class="annotate"># add an element to the set</span>my_set.add(4)
<span class="annotate"># print the updated set</span>print(my_set)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 3: Removing an Element from a Set</span>
<span class="annotate"># create a set</span>my_set = {1, 2, 3, 4}
<span class="annotate"># remove an element from the set</span>my_set.remove(3)
<span class="annotate"># print the updated set</span>print(my_set)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 4: Using discard() to Remove an Element</span>
<span class="annotate"># create a set</span>my_set = {1, 2, 3, 4}
<span class="annotate"># discard an element</span>my_set.discard(2)
<span class="annotate"># print the updated set</span>print(my_set)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 5: Clearing a Set</span>
<span class="annotate"># create a set</span>my_set = {1, 2, 3}
<span class="annotate"># clear all elements from the set</span>my_set.clear()
<span class="annotate"># print the empty set</span>print(my_set)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 6: Set Union</span>
<span class="annotate"># create two sets</span>set1 = {1, 2, 3}
<span class="annotate"># union of two sets</span>set2 = {3, 4, 5}
<span class="annotate"># combine both sets</span>union_set = set1 | set2
<span class="annotate"># print the union</span>print(union_set)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 7: Set Intersection</span>
<span class="annotate"># create two sets</span>set1 = {1, 2, 3}
<span class="annotate"># intersection of two sets</span>set2 = {3, 4, 5}
<span class="annotate"># get common elements</span>intersection_set = set1 & set2
<span class="annotate"># print the intersection</span>print(intersection_set)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 8: Set Difference</span>
<span class="annotate"># create two sets</span>set1 = {1, 2, 3}
<span class="annotate"># difference between two sets</span>set2 = {3, 4, 5}
<span class="annotate"># elements in set1 but not in set2</span>difference_set = set1 - set2
<span class="annotate"># print the difference</span>print(difference_set)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 9: Set Symmetric Difference</span>
<span class="annotate"># create two sets</span>set1 = {1, 2, 3}
<span class="annotate"># symmetric difference between two sets</span>set2 = {3, 4, 5}
<span class="annotate"># elements in set1 or set2, but not in both</span>symmetric_difference_set = set1 ^ set2
<span class="annotate"># print the symmetric difference</span>print(symmetric_difference_set)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 10: Checking if a Set is Subset of Another</span>
<span class="annotate"># create two sets</span>set1 = {1, 2}
<span class="annotate"># check if set1 is a subset of set2</span>set2 = {1, 2, 3, 4}
<span class="annotate"># print if set1 is a subset of set2</span>print(set1.issubset(set2))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 11: Checking if a Set is Superset of Another</span>
<span class="annotate"># create two sets</span>set1 = {1, 2, 3, 4}
<span class="annotate"># check if set1 is a superset of set2</span>set2 = {1, 2}
<span class="annotate"># print if set1 is a superset of set2</span>print(set1.issuperset(set2))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 12: Checking if a Set is Disjoint with Another</span>
<span class="annotate"># create two sets</span>set1 = {1, 2, 3}
<span class="annotate"># check if set1 and set2 have no common elements</span>set2 = {4, 5, 6}
<span class="annotate"># print if sets are disjoint</span>print(set1.isdisjoint(set2))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 13: Set Length</span>
<span class="annotate"># create a set</span>my_set = {1, 2, 3, 4}
<span class="annotate"># get the length of the set</span>print(len(my_set))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 14: Set Copy</span>
<span class="annotate"># create a set</span>my_set = {1, 2, 3, 4}
<span class="annotate"># copy the set</span>new_set = my_set.copy()
<span class="annotate"># print the copied set</span>print(new_set)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 15: Frozen Set</span>
<span class="annotate"># create a frozen set (immutable set)</span>frozen_set = frozenset([1, 2, 3])
<span class="annotate"># print the frozen set</span>print(frozen_set)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 16: Set with Multiple Data Types</span>
<span class="annotate"># create a set with mixed data types</span>my_set = {1, 'apple', 3.14}
<span class="annotate"># print the set</span>print(my_set)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 17: Set Comprehension</span>
<span class="annotate"># create a set using comprehension</span>my_set = {x**2 for x in range(5)}
<span class="annotate"># print the set</span>print(my_set)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 18: Checking for an Element in a Set</span>
<span class="annotate"># create a set</span>my_set = {1, 2, 3, 4}
<span class="annotate"># check if 3 is in the set</span>print(3 in my_set)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 19: Set Intersection with Another Set</span>
<span class="annotate"># create two sets</span>set1 = {1, 2, 3}
<span class="annotate"># find common elements between two sets</span>set2 = {3, 4, 5}
<span class="annotate"># intersection of two sets</span>print(set1.intersection(set2))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 20: Using Set Operations with Multiple Sets</span>
<span class="annotate"># create three sets</span>set1 = {1, 2, 3}
<span class="annotate"># perform union on three sets</span>set2 = {3, 4, 5}
<span class="annotate"># union of three sets</span>set3 = {5, 6, 7}
<span class="annotate"># result of union</span>print(set1 | set2 | set3)
</li>


<!-- More examples can be generated similarly for the remaining 28 variables -->



</ul>
  </li>

<li>
    <div class="link"><span class="material-symbols-outlined">
</span>Test Your Skills:Python-Sets<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu"style="margin-left:1%;width:98%;padding-left: 0px;padding-right: 0px;margin-right:-3%; background: #000;overflow:hidden;">
      
  



 <iframe src="mycompiler/testquizvariables.html"style="border-bottom-left-radius:0px;border-bottom-right-radius:0px;height:390px;top:0%;border:none; width:100%;overflow-x:hidden;overflow-y:auto;scrollbar-width: none;margin-left:0%;justify-content: center;"></iframe>

</span></li>
</li></ul>
  </li>

   <li>
    <div class="link"><span class="material-symbols-outlined">
</span>Python Classes & Objects<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu">

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 1: Creating a Simple Class</span>
<span class="annotate"># Define a class</span>class Person:
<span class="annotate"># Define a constructor</span>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, name, age):
<span class="annotate"># Initialize instance variables</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.name = name
<span class="annotate"># Initialize instance variables</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.age = age
<span class="annotate"># Create an object of the class</span>person1 = Person("John", 25)
<span class="annotate"># Print object properties</span>print(person1.name, person1.age)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 2: Creating and Accessing Methods in a Class</span>
<span class="annotate"># Define a class</span>class Car:
<span class="annotate"># Define a constructor</span>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, make, model):
<span class="annotate"># Initialize instance variables</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.make = make
<span class="annotate"># Initialize instance variables</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.model = model

<span class="annotate"># Define a method</span>&nbsp;&nbsp;&nbsp;&nbsp;def display_info(self):
<span class="annotate"># Print car information</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f"{self.make} {self.model}")

<span class="annotate"># Create an object of the class</span>car1 = Car("Toyota", "Corolla")
<span class="annotate"># Call method on the object</span>car1.display_info()
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 3: Modifying Instance Variables</span>
<span class="annotate"># Define a class</span>class Student:
<span class="annotate"># Define a constructor</span>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, name, grade):
<span class="annotate"># Initialize instance variables</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.name = name
<span class="annotate"># Initialize instance variables</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.grade = grade

<span class="annotate"># Define a method to change grade</span>&nbsp;&nbsp;&nbsp;&nbsp;def update_grade(self, new_grade):
<span class="annotate"># Modify the grade</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.grade = new_grade

<span class="annotate"># Create an object of the class</span>student1 = Student("Alice", "B")
<span class="annotate"># Print original grade</span>print(student1.grade)
<span class="annotate"># Update grade</span>student1.update_grade("A")
<span class="annotate"># Print updated grade</span>print(student1.grade)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 4: Inheritance in Python</span>
<span class="annotate"># Define a base class</span>class Animal:
<span class="annotate"># Define a constructor</span>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, name):
<span class="annotate"># Initialize instance variable</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.name = name

<span class="annotate"># Define a method</span>&nbsp;&nbsp;&nbsp;&nbsp;def speak(self):
<span class="annotate"># Print sound</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f"{self.name} makes a sound")

<span class="annotate"># Define a derived class</span>class Dog(Animal):
<span class="annotate"># Override method</span>&nbsp;&nbsp;&nbsp;&nbsp;def speak(self):
<span class="annotate"># Print sound</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f"{self.name} barks")

<span class="annotate"># Create an object of the derived class</span>dog1 = Dog("Rex")
<span class="annotate"># Call overridden method</span>dog1.speak()
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 5: Multiple Inheritance</span>
<span class="annotate"># Define first base class</span>class Father:
<span class="annotate"># Define a method</span>&nbsp;&nbsp;&nbsp;&nbsp;def speak(self):
<span class="annotate"># Print speech</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("I am the father")

<span class="annotate"># Define second base class</span>class Mother:
<span class="annotate"># Define a method</span>&nbsp;&nbsp;&nbsp;&nbsp;def walk(self):
<span class="annotate"># Print action</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("I am the mother")

<span class="annotate"># Define derived class</span>class Child(Father, Mother):
<span class="annotate"># Define a method</span>&nbsp;&nbsp;&nbsp;&nbsp;def play(self):
<span class="annotate"># Print action</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("I am the child")

<span class="annotate"># Create an object of the derived class</span>child1 = Child()
<span class="annotate"># Call methods from base classes</span>child1.speak()
<span class="annotate"># Call method from second base class</span>child1.walk()
<span class="annotate"># Call method from derived class</span>child1.play()
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 6: Encapsulation in Python</span>
<span class="annotate"># Define a class</span>class BankAccount:
<span class="annotate"># Define a constructor</span>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, balance):
<span class="annotate"># Initialize instance variable</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.__balance = balance

<span class="annotate"># Define a method to access balance</span>&nbsp;&nbsp;&nbsp;&nbsp;def get_balance(self):
<span class="annotate"># Return the balance</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return self.__balance

<span class="annotate"># Define a method to deposit money</span>&nbsp;&nbsp;&nbsp;&nbsp;def deposit(self, amount):
<span class="annotate"># Increase the balance</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.__balance += amount

<span class="annotate"># Create an object of the class</span>account = BankAccount(1000)
<span class="annotate"># Call methods on the object</span>print(account.get_balance())
<span class="annotate"># Deposit money into account</span>account.deposit(500)
<span class="annotate"># Print updated balance</span>print(account.get_balance())
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 7: Accessing Class Variables</span>
<span class="annotate"># Define a class</span>class Car:
<span class="annotate"># Define a constructor</span>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, brand, year):
<span class="annotate"># Initialize class variables</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.brand = brand
<span class="annotate"># Initialize class variables</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.year = year

<span class="annotate"># Create an object of the class</span>car1 = Car("Ford", 2020)
<span class="annotate"># Access class variables</span>print(car1.brand, car1.year)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 8: Creating a Class with a Method</span>
<span class="annotate"># Define a class</span>class Dog:
<span class="annotate"># Define a constructor</span>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, name, breed):
<span class="annotate"># Initialize instance variables</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.name = name
<span class="annotate"># Initialize instance variables</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.breed = breed

<span class="annotate"># Define a method</span>&nbsp;&nbsp;&nbsp;&nbsp;def bark(self):
<span class="annotate"># Print a message</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f"{self.name} says woof!")

<span class="annotate"># Create an object of the class</span>dog1 = Dog("Buddy", "Golden Retriever")
<span class="annotate"># Call the method</span>dog1.bark()
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 9: Updating Object Attributes</span>
<span class="annotate"># Define a class</span>class Person:
<span class="annotate"># Define a constructor</span>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, name, age):
<span class="annotate"># Initialize instance variables</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.name = name
<span class="annotate"># Initialize instance variables</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.age = age

<span class="annotate"># Define a method to update age</span>&nbsp;&nbsp;&nbsp;&nbsp;def update_age(self, new_age):
<span class="annotate"># Update the age attribute</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.age = new_age

<span class="annotate"># Create an object of the class</span>person1 = Person("John", 30)
<span class="annotate"># Update object attribute</span>person1.update_age(31)
<span class="annotate"># Print updated attribute</span>print(person1.age)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 10: Using a Class Variable</span>
<span class="annotate"># Define a class</span>class Counter:
<span class="annotate"># Define a class variable</span>&nbsp;&nbsp;&nbsp;&nbsp;count = 0

<span class="annotate"># Define a method</span>&nbsp;&nbsp;&nbsp;&nbsp;def increment(cls):
<span class="annotate"># Increment the class variable</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cls.count += 1

<span class="annotate"># Create an object of the class</span>counter1 = Counter()
<span class="annotate"># Increment the count</span>counter1.increment()
<span class="annotate"># Print class variable</span>print(Counter.count)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 11: Simple Inheritance Example</span>
<span class="annotate"># Define a parent class</span>class Animal:
<span class="annotate"># Define a method</span>&nbsp;&nbsp;&nbsp;&nbsp;def speak(self):
<span class="annotate"># Print a message</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Animal makes a sound")

<span class="annotate"># Define a child class</span>class Dog(Animal):
<span class="annotate"># Override parent method</span>&nbsp;&nbsp;&nbsp;&nbsp;def speak(self):
<span class="annotate"># Print a dog-specific message</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Dog barks")

<span class="annotate"># Create an object of the child class</span>dog = Dog()
<span class="annotate"># Call overridden method</span>dog.speak()
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 12: Using Super in Inheritance</span>
<span class="annotate"># Define a parent class</span>class Animal:
<span class="annotate"># Define a constructor</span>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, name):
<span class="annotate"># Initialize instance variable</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.name = name

<span class="annotate"># Define a method</span>&nbsp;&nbsp;&nbsp;&nbsp;def speak(self):
<span class="annotate"># Print a message</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f"{self.name} makes a sound")

<span class="annotate"># Define a child class</span>class Dog(Animal):
<span class="annotate"># Override the constructor</span>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, name, breed):
<span class="annotate"># Initialize parent constructor</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super().__init__(name)
<span class="annotate"># Initialize child instance variable</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.breed = breed

<span class="annotate"># Create an object of the child class</span>dog = Dog("Rex", "Bulldog")
<span class="annotate"># Call parent method</span>dog.speak()
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 13: Method Overriding in Inheritance</span>
<span class="annotate"># Define a parent class</span>class Animal:
<span class="annotate"># Define a method</span>&nbsp;&nbsp;&nbsp;&nbsp;def make_sound(self):
<span class="annotate"># Print message</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Animal sound")

<span class="annotate"># Define a child class</span>class Dog(Animal):
<span class="annotate"># Override method</span>&nbsp;&nbsp;&nbsp;&nbsp;def make_sound(self):
<span class="annotate"># Print dog sound</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Bark")

<span class="annotate"># Create an object of the child class</span>dog = Dog()
<span class="annotate"># Call overridden method</span>dog.make_sound()
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 14: Class with a Class Method</span>
<span class="annotate"># Define a class</span>class Vehicle:
<span class="annotate"># Define a class method</span>&nbsp;&nbsp;&nbsp;&nbsp;@classmethod
<span class="annotate"># Define a method</span>&nbsp;&nbsp;&nbsp;&nbsp;def info(cls):
<span class="annotate"># Print vehicle info</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("This is a vehicle")

<span class="annotate"># Call class method</span>Vehicle.info()
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 15: Class with a Static Method</span>
<span class="annotate"># Define a class</span>class MathOperations:
<span class="annotate"># Define a static method</span>&nbsp;&nbsp;&nbsp;&nbsp;@staticmethod
<span class="annotate"># Define a method</span>&nbsp;&nbsp;&nbsp;&nbsp;def add(x, y):
<span class="annotate"># Add two numbers</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return x + y

<span class="annotate"># Call static method</span>print(MathOperations.add(5, 3))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 16: Creating an Object of a Subclass</span>
<span class="annotate"># Define a parent class</span>class Animal:
<span class="annotate"># Define a method</span>&nbsp;&nbsp;&nbsp;&nbsp;def make_sound(self):
<span class="annotate"># Print message</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Animal sound")

<span class="annotate"># Define a subclass</span>class Dog(Animal):
<span class="annotate"># Override method</span>&nbsp;&nbsp;&nbsp;&nbsp;def make_sound(self):
<span class="annotate"># Print dog sound</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Woof")

<span class="annotate"># Create an object of the subclass</span>dog = Dog()
<span class="annotate"># Call method from subclass</span>dog.make_sound()
</li>




<!-- More examples can be generated similarly for the remaining 28 variables -->



</ul>
  </li>

<li>
    <div class="link"><span class="material-symbols-outlined">
</span>Test Your Skills:Python-Classes and Objects<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu"style="margin-left:1%;width:98%;padding-left: 0px;padding-right: 0px;margin-right:-3%; background: #000;overflow:hidden;">
      
  



 <iframe src="mycompiler/testquizvariables.html"style="border-bottom-left-radius:0px;border-bottom-right-radius:0px;height:390px;top:0%;border:none; width:100%;overflow-x:hidden;overflow-y:auto;scrollbar-width: none;margin-left:0%;justify-content: center;"></iframe>

</span></li>
</li></ul>
  </li>
   <li>
    <div class="link"><span class="material-symbols-outlined">
</span>Python Math Module<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu">

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 1: Using math.sqrt to Find the Square Root</span>
<span class="annotate"># Import math module</span>import math
<span class="annotate"># Find the square root of a number</span>print(math.sqrt(16))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 2: Using math.pow to Calculate Powers</span>
<span class="annotate"># Import math module</span>import math
<span class="annotate"># Calculate 2 raised to the power of 3</span>print(math.pow(2, 3))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 3: Using math.pi to Get the Value of Pi</span>
<span class="annotate"># Import math module</span>import math
<span class="annotate"># Print the value of Pi</span>print(math.pi)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 4: Using math.e for Euler's Number</span>
<span class="annotate"># Import math module</span>import math
<span class="annotate"># Print the value of Euler's number (e)</span>print(math.e)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 5: Using math.factorial to Find Factorial of a Number</span>
<span class="annotate"># Import math module</span>import math
<span class="annotate"># Find the factorial of 5</span>print(math.factorial(5))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 6: Using math.sin to Calculate the Sine of an Angle</span>
<span class="annotate"># Import math module</span>import math
<span class="annotate"># Calculate the sine of a 45-degree angle (converted to radians)</span>print(math.sin(math.radians(45)))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 7: Using math.cos to Calculate the Cosine of an Angle</span>
<span class="annotate"># Import math module</span>import math
<span class="annotate"># Calculate the cosine of a 45-degree angle (converted to radians)</span>print(math.cos(math.radians(45)))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 8: Using math.tan to Calculate the Tangent of an Angle</span>
<span class="annotate"># Import math module</span>import math
<span class="annotate"># Calculate the tangent of a 45-degree angle (converted to radians)</span>print(math.tan(math.radians(45)))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 9: Using math.ceil to Round Up to the Nearest Integer</span>
<span class="annotate"># Import math module</span>import math
<span class="annotate"># Round 4.2 up to the nearest integer</span>print(math.ceil(4.2))
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 10: Using math.floor to Round Down to the Nearest Integer</span>
<span class="annotate"># Import math module</span>import math
<span class="annotate"># Round 4.7 down to the nearest integer</span>print(math.floor(4.7))
</li>



<!-- More examples can be generated similarly for the remaining 28 variables -->



</ul>
  </li>
<li>
    <div class="link"><span class="material-symbols-outlined">
</span>Python Turtles<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
    <ul class="submenu">

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 1: Drawing a Square</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(1)
<span class="annotate"># for loop</span>for _ in range(4):
<span class="annotate"># Move Forward</span>&nbsp;&nbsp;&nbsp;&nbsp;t.forward(100)
<span class="annotate"># Move Left</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(90)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 2: Drawing a Triangle</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(1)
<span class="annotate"># for loop</span>for _ in range(3):
<span class="annotate"># Move Forward</span>&nbsp;&nbsp;&nbsp;&nbsp;t.forward(100)
<span class="annotate"># Move Left</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(120)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 3: Drawing a Circle</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(1)
<span class="annotate"># Draw a circle</span>t.circle(100)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 4: Drawing a Rectangle</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(1)
<span class="annotate"># for loop</span>for _ in range(2):
<span class="annotate"># Move Forward</span>&nbsp;&nbsp;&nbsp;&nbsp;t.forward(150)
<span class="annotate"># Move Left</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(90)
<span class="annotate"># Move Forward</span>&nbsp;&nbsp;&nbsp;&nbsp;t.forward(100)
<span class="annotate"># Move Left</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(90)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 5: Drawing an Equilateral Triangle</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(1)
<span class="annotate"># for loop</span>for _ in range(3):
<span class="annotate"># Move Forward</span>&nbsp;&nbsp;&nbsp;&nbsp;t.forward(100)
<span class="annotate"># Move Left</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(120)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 6: Drawing a Star</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(3)
<span class="annotate"># for loop</span>for _ in range(5):
<span class="annotate"># Move Forward</span>&nbsp;&nbsp;&nbsp;&nbsp;t.forward(100)
<span class="annotate"># Move Right</span>&nbsp;&nbsp;&nbsp;&nbsp;t.right(144)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 7: Animated Square</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(3)
<span class="annotate"># for loop</span>for i in range(4):
<span class="annotate"># Move Forward</span>&nbsp;&nbsp;&nbsp;&nbsp;t.forward(100 + i*10)
<span class="annotate"># Move Left</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(90)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 8: Animated Triangle</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(3)
<span class="annotate"># for loop</span>for i in range(3):
<span class="annotate"># Move Forward</span>&nbsp;&nbsp;&nbsp;&nbsp;t.forward(100 + i*20)
<span class="annotate"># Move Left</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(120)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 9: Animated Circle</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(3)
<span class="annotate"># for loop</span>for i in range(10):
<span class="annotate"># Draw Circle</span>&nbsp;&nbsp;&nbsp;&nbsp;t.circle(50 + i*5)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 10: Drawing a Hexagon</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(1)
<span class="annotate"># for loop</span>for _ in range(6):
<span class="annotate"># Move Forward</span>&nbsp;&nbsp;&nbsp;&nbsp;t.forward(100)
<span class="annotate"># Move Left</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(60)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 11: Drawing an Octagon</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(1)
<span class="annotate"># for loop</span>for _ in range(8):
<span class="annotate"># Move Forward</span>&nbsp;&nbsp;&nbsp;&nbsp;t.forward(100)
<span class="annotate"># Move Left</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(45)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 12: Drawing a Polygon with 10 sides</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(1)
<span class="annotate"># for loop</span>for _ in range(10):
<span class="annotate"># Move Forward</span>&nbsp;&nbsp;&nbsp;&nbsp;t.forward(50)
<span class="annotate"># Move Left</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(36)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 13: Filling Shapes with Color</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(1)
<span class="annotate"># Begin filling color</span>t.begin_fill()
<span class="annotate"># for loop</span>for _ in range(4):
<span class="annotate"># Move Forward</span>&nbsp;&nbsp;&nbsp;&nbsp;t.forward(100)
<span class="annotate"># Move Left</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(90)
<span class="annotate"># End filling color</span>t.end_fill()
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 14: Animated Colored Circle</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(3)
<span class="annotate"># for loop</span>for i in range(36):
<span class="annotate"># Draw Circle</span>&nbsp;&nbsp;&nbsp;&nbsp;t.circle(50 + i*5)
<span class="annotate"># Change Color</span>&nbsp;&nbsp;&nbsp;&nbsp;t.pencolor(i/36, i/36, 1-i/36)
<span class="annotate"># Turn Turtle</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(10)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 15: Animated Square with Color Change</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(3)
<span class="annotate"># for loop</span>for i in range(4):
<span class="annotate"># Move Forward</span>&nbsp;&nbsp;&nbsp;&nbsp;t.forward(100 + i*10)
<span class="annotate"># Change Color</span>&nbsp;&nbsp;&nbsp;&nbsp;t.pencolor(i/4, 0, 1-i/4)
<span class="annotate"># Move Left</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(90)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 16: Drawing a Spiral</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(10)
<span class="annotate"># for loop</span>for i in range(50):
<span class="annotate"># Move Forward</span>&nbsp;&nbsp;&nbsp;&nbsp;t.forward(i*10)
<span class="annotate"># Move Left</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(90)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 17: Drawing a Spirograph</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(10)
<span class="annotate"># for loop</span>for _ in range(36):
<span class="annotate"># Draw Circle</span>&nbsp;&nbsp;&nbsp;&nbsp;t.circle(100)
<span class="annotate"># Turn Turtle</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(10)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 18: Drawing a Flower Pattern</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(10)
<span class="annotate"># for loop</span>for _ in range(36):
<span class="annotate"># Draw Circle</span>&nbsp;&nbsp;&nbsp;&nbsp;t.circle(100)
<span class="annotate"># Turn Turtle</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(10)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 19: Draw a Spiral Square</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(10)
<span class="annotate"># for loop</span>for i in range(50):
<span class="annotate"># Move Forward</span>&nbsp;&nbsp;&nbsp;&nbsp;t.forward(i*10)
<span class="annotate"># Move Left</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(90)
</li>

<li><span style="color:white;font-size: 12px;font-weight: bold;"># Example 20: Drawing a Spirograph</span>
<span class="annotate"># Import turtle module</span>import turtle
<span class="annotate"># Create turtle object</span>t = turtle.Turtle()
<span class="annotate"># Set turtle speed</span>t.speed(10)
<span class="annotate"># for loop</span>for _ in range(36):
<span class="annotate"># Draw Circle</span>&nbsp;&nbsp;&nbsp;&nbsp;t.circle(100)
<span class="annotate"># Turn Turtle</span>&nbsp;&nbsp;&nbsp;&nbsp;t.left(10)
</li>



<!-- More examples can be generated similarly for the remaining 28 variables -->



</ul>
  </li>


<li><span style="color:red;font-size: 9px;">| Course Editors | Youssef Yasser Kusibati | Abdulrahman Mohammed A Aljohani|</span>

 
  

</ul>
  </li>

<li>
<div class="link">OOP<span class="chevron material-symbols-outlined"><<img src="./mycompiler/python-101.png" width="17" align="absmiddle">></span></div>
<ul class="submenu">
   
</ul>
</li>

</ul>
 </div>
  </div>
<div class="side-panel">
<div id="help"style="overflow-y:hidden;scrollbar-width:none;"> <div id="topbar" class="prevent-select"style="overflow-y:hidden;scrollbar-width:none;border-radius:0px;background: #0F192A;">
 
</div>


</div>

</div>
<textarea id="interactive" style="display: none;"></textarea>
<script src="./mycompiler/jquery.min.js.download"></script>
<script src="./mycompiler/skulpt.min.js.download"></script>
<script src="./mycompiler/skulpt-stdlib.js.download"></script>
<script src="./mycompiler/codemirrorepl.js.download"></script>
<script src="./mycompiler/python.js.download"></script>
<script>
var theme="midnight";
</script>
<script src="./mycompiler/script.js.download"></script>
<script src="./mycompiler/codemirror.js.download"></script>
<script src="./mycompiler/addons.js.download"></script>
<script>new Tab("#tab");

 $("#newWindow").click(function (e) {
   window.open("index.php?theme="+theme, '_blank', 'width=' + screen.width + ', height=' + screen.height + ',top=0,left=0,toolbar=no,scrollbars=yes,status=no,menubar=no,fullscreen=yes');
  } ); 
   
</script>
	
<script>
 window.onbeforeunload = function (e) {
    e = e || window.event;

    // For IE and Firefox prior to version 4
    if (e) {
        e.returnValue = 'By exiting this window you will lose all changes you have made to your code. Are you sure you want to exit this window?';
    }

    // For Safari
    return 'By exiting this window you will lose all changes you have made to your code. Are you sure you want to exit this window?';
};
$("#resetBtn").click(function (e) {
location.reload();
});

$(function() {
	var Accordion = function(el, multiple) {
		this.el = el || {};
		this.multiple = multiple || false;

		// Variables privadas
		var links = this.el.find('.link');
		// Evento
		links.on('click', {el: this.el, multiple: this.multiple}, this.dropdown)
	}

	Accordion.prototype.dropdown = function(e) {
		var $el = e.data.el;
			$this = $(this),
			$next = $this.next();

		$next.slideToggle();
		$this.parent().toggleClass('open');

		if (!e.data.multiple) {
			$el.find('.submenu').not($next).slideUp().parent().removeClass('open');
		};
	}	

	var accordion = new Accordion($('#accordion'), false);
});


document.querySelector(".side-panel-toggle").addEventListener("click", () => {
  document.querySelector(".wrapper").classList.toggle("side-panel-open");
});
 
</script>


<span id="PING_CONTENT_DLS_POPUP" style="display: none;"></span><div style="background-color: transparent; border: none; bottom: 15px; display: block; margin: 0px; opacity: 1; padding: 0px; position: fixed; right: 15px; z-index: 2147483647;"><template shadowrootmode="closed"><style>/*!

@import url(https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&family=Poppins:ital,wght@0,400;0,500;0,600;0,800;1,400;1,500;1,600;1,800&display=swap);
*{border:0;box-sizing:border-box;font:inherit;font-family:"mcafeeOpenSans","Poppins",Helvetica,Arial,Arial,Helvetica,sans-serif;font-size:100%;margin:0;padding:0;vertical-align:baseline;outline:none}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}html,body{background-color:#f5f6fa;font-family:"Poppins",Helvetica,Arial,"mcafeeOpenSans",Arial,Helvetica,sans-serif;line-height:1;height:100%;width:100%}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:after,blockquote:before,q:after,q:before{content:"";content:none}table{border-collapse:collapse;border-spacing:0}b{font-weight:bold}img{display:block}.dls__container{align-items:center;display:flex;margin:0 auto;margin-top:50px;position:relative}.dls__popup__expanded{align-items:center;overflow:hidden;border-radius:100px;cursor:pointer;display:flex;left:0;padding:15px;position:absolute;height:95px;width:383px;background-color:#fff;transition:all .3s ease-in-out}.dls__popup__expanded .dls__icon{height:65px;width:73px}.content{margin-left:12px}.content .content__images{display:flex;align-items:center;width:250px}.content .content__images .seperator__line{margin-left:5px;margin-right:10px}.content .content__images #dls_close_icon{cursor:pointer;margin-left:auto;margin-right:0px}.content p{font-family:"Poppins",Arial,Helvetica,sans-serif;font-weight:"400";font-size:14px;line-height:20px;margin-top:8px;color:#4258ff;width:250px;cursor:pointer}.shield{overflow:hidden;box-shadow:0px 2px 4px 0px rgba(33,41,52,.12),0px -1px 2px 0px rgba(0,0,0,.08);align-items:center;border-radius:100px;bottom:0;display:flex;height:95px;justify-content:center;position:absolute;right:0;width:383px;transition:all .3s ease-in-out}.shield__circle{display:flex;justify-content:center;align-items:center;width:55px;height:55px;background-color:#c01818;transition:all .6s ease-in-out .2s;z-index:1;opacity:0}

/*# sourceMappingURL=../sourceMap/chrome/css/download_scan_popup.css.map*/</style><div class="dls__container">
  <div class="shield" style="background: transparent; opacity: 0.1; display: none;">
    <div class="shield__circle" style="opacity: 1;">
      <img src="chrome-extension://fheoggkfdfchfphceeifdbepaooicaho/images/download_scan/mcafee_logo_white.svg?secret=lqli7s" x-mcsrc="" id="dls_ballon_icon" x-mcsrcparsed="true">
    </div>
    <div class="dls__popup__expanded" style="opacity: 0;">
      <img src="chrome-extension://fheoggkfdfchfphceeifdbepaooicaho/images/download_scan/download_scan_icon.svg?secret=lqli7s" x-mcsrc="" class="dls__icon" x-mcsrcparsed="true">
      <div class="content">
        <div class="content__images">
          <img src="chrome-extension://fheoggkfdfchfphceeifdbepaooicaho/images/download_scan/mcafee_logo_red.svg?secret=lqli7s" x-mcsrc="" id="dls_mcafee_logo" x-mcsrcparsed="true">
          <img src="chrome-extension://fheoggkfdfchfphceeifdbepaooicaho/images/download_scan/seperator_line.svg?secret=lqli7s" x-mcsrc="" class="seperator__line" x-mcsrcparsed="true">
          <img src="chrome-extension://fheoggkfdfchfphceeifdbepaooicaho/images/download_scan/webadvisor.svg?secret=lqli7s" x-mcsrc="" x-mcsrcparsed="true">
          <img src="chrome-extension://fheoggkfdfchfphceeifdbepaooicaho/images/download_scan/close-outline.svg?secret=lqli7s" x-mcsrc="" id="dls_close_icon" x-mcsrcparsed="true">
        </div>
        <p id="download_scan_popup_expanded_descriptions">Your download's being scanned. We'll let you know if there's an issue.</p>
      </div>
    </div>
  </div>
</div><style>

.mc-interactive-balloon{position:absolute;right:-50px;bottom:8px;box-shadow:rgba(0,0,0,.12) 0px 0px 10px;height:40px;width:40px;background:#1671ee;border-radius:20px;display:flex;justify-content:center;align-items:center}

/*# sourceMappingURL=../sourceMap/chrome/css/interactive_balloon.css.map*/</style></template></div>
<script>
// Initialize CodeMirror editor
        const editor = CodeMirror.fromTextArea(document.getElementById('code'), {
            mode: "python",
            lineNumbers: true,
            theme: "theme",
        });

        // Button click event to copy content
        document.getElementById('copyButton').addEventListener('click', () => {
            // Get the content from CodeMirror editor
            const codeContent = editor.getValue();

            // Paste the content into the <pre> element
            document.getElementById('edoutput').textContent = codeContent;

            // Optional: Log for debugging
            console.log("Copied Content:", codeContent);
        });


</script>
<script>
    // Function to reload the page
function reloadPage() {
  const codeContent = editor.getValue();
  localStorage.setItem('editorContent', codeContent); // Store the content in localStorage
  location.reload(); // Reloads the current page
}

// On page load, set the editor value back if there is saved content
window.onload = function() {
  const savedContent = localStorage.getItem('editorContent');
  if (savedContent) {
    editor.setValue(savedContent); // Set the saved content back to the editor
  }
};

// Dummy closeModal function
function closeModal() {
  document.getElementById('sketchModal').style.display = 'none';
}

  </script>  
/*# sourceMappingURL=../sourceMap/chrome/css/interactive_balloon.css.map*/</style></template></div>
<script>

const modal = document.getElementById('modal-dialog');
const closeModal = document.getElementById('close-modal');

// Show modal on click
fbButton.addEventListener('click', () => {
  modal.style.display = 'block';
});

// Hide modal when the close button is clicked
closeModal.addEventListener('click', () => {
  modal.style.display = 'none';
});

// Hide modal when clicking outside the modal content
window.addEventListener('click', (event) => {
  if (event.target === modal) {
    modal.style.display = 'none';
  }
});</script>


<textarea id="interactive" style="display: none;"></textarea>
<script src="./mycompiler/jquery.min.js.download"></script>
<script src="./mycompiler/skulpt.min.js.download"></script>
<script src="./mycompiler/skulpt-stdlib.js.download"></script>
<script src="./mycompiler/codemirrorepl.js.download"></script>
<script src="./mycompiler/python.js.download"></script>
<script>
var theme="midnight";
</script>
<script src="./mycompiler/script.js.download"></script>
<script src="./mycompiler/codemirror.js.download"></script>
<script src="./mycompiler/addons.js.download"></script>
<script>new Tab("#tab");

 $("#newWindow").click(function (e) {
   window.open("index.php?theme="+theme, '_blank', 'width=' + screen.width + ', height=' + screen.height + ',top=0,left=0,toolbar=no,scrollbars=yes,status=no,menubar=no,fullscreen=yes');
  } ); 
   
</script>
	


<span id="PING_CONTENT_DLS_POPUP" style="display: none;"></span><div style="background-color: transparent; border: none; bottom: 15px; display: block; margin: 0px; opacity: 1; padding: 0px; position: fixed; right: 15px; z-index: 2147483647;"><template shadowrootmode="closed"><style>/*!

@import url(https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&family=Poppins:ital,wght@0,400;0,500;0,600;0,800;1,400;1,500;1,600;1,800&display=swap);
*{border:0;box-sizing:border-box;font:inherit;font-family:"mcafeeOpenSans","Poppins",Helvetica,Arial,Arial,Helvetica,sans-serif;font-size:100%;margin:0;padding:0;vertical-align:baseline;outline:none}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}html,body{background-color:#f5f6fa;font-family:"Poppins",Helvetica,Arial,"mcafeeOpenSans",Arial,Helvetica,sans-serif;line-height:1;height:100%;width:100%}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:after,blockquote:before,q:after,q:before{content:"";content:none}table{border-collapse:collapse;border-spacing:0}b{font-weight:bold}img{display:block}.dls__container{align-items:center;display:flex;margin:0 auto;margin-top:50px;position:relative}.dls__popup__expanded{align-items:center;overflow:hidden;border-radius:100px;cursor:pointer;display:flex;left:0;padding:15px;position:absolute;height:95px;width:383px;background-color:#fff;transition:all .3s ease-in-out}.dls__popup__expanded .dls__icon{height:65px;width:73px}.content{margin-left:12px}.content .content__images{display:flex;align-items:center;width:250px}.content .content__images .seperator__line{margin-left:5px;margin-right:10px}.content .content__images #dls_close_icon{cursor:pointer;margin-left:auto;margin-right:0px}.content p{font-family:"Poppins",Arial,Helvetica,sans-serif;font-weight:"400";font-size:14px;line-height:20px;margin-top:8px;color:#4258ff;width:250px;cursor:pointer}.shield{overflow:hidden;box-shadow:0px 2px 4px 0px rgba(33,41,52,.12),0px -1px 2px 0px rgba(0,0,0,.08);align-items:center;border-radius:100px;bottom:0;display:flex;height:95px;justify-content:center;position:absolute;right:0;width:383px;transition:all .3s ease-in-out}.shield__circle{display:flex;justify-content:center;align-items:center;width:55px;height:55px;background-color:#c01818;transition:all .6s ease-in-out .2s;z-index:1;opacity:0}

/*# sourceMappingURL=../sourceMap/chrome/css/download_scan_popup.css.map*/</style><div class="dls__container">
  <div class="shield" style="background: transparent; opacity: 0.1; display: none;">
    <div class="shield__circle" style="opacity: 1;">
      <img src="chrome-extension://fheoggkfdfchfphceeifdbepaooicaho/images/download_scan/mcafee_logo_white.svg?secret=lqli7s" x-mcsrc="" id="dls_ballon_icon" x-mcsrcparsed="true">
    </div>
    <div class="dls__popup__expanded" style="opacity: 0;">
      <img src="chrome-extension://fheoggkfdfchfphceeifdbepaooicaho/images/download_scan/download_scan_icon.svg?secret=lqli7s" x-mcsrc="" class="dls__icon" x-mcsrcparsed="true">
      <div class="content">
        <div class="content__images">
          <img src="chrome-extension://fheoggkfdfchfphceeifdbepaooicaho/images/download_scan/mcafee_logo_red.svg?secret=lqli7s" x-mcsrc="" id="dls_mcafee_logo" x-mcsrcparsed="true">
          <img src="chrome-extension://fheoggkfdfchfphceeifdbepaooicaho/images/download_scan/seperator_line.svg?secret=lqli7s" x-mcsrc="" class="seperator__line" x-mcsrcparsed="true">
          <img src="chrome-extension://fheoggkfdfchfphceeifdbepaooicaho/images/download_scan/webadvisor.svg?secret=lqli7s" x-mcsrc="" x-mcsrcparsed="true">
          <img src="chrome-extension://fheoggkfdfchfphceeifdbepaooicaho/images/download_scan/close-outline.svg?secret=lqli7s" x-mcsrc="" id="dls_close_icon" x-mcsrcparsed="true">
        </div>
        <p id="download_scan_popup_expanded_descriptions">Your download's being scanned. We'll let you know if there's an issue.</p>
      </div>
    </div>
  </div>
</div><style>
.mc-interactive-balloon{position:absolute;right:-50px;bottom:8px;box-shadow:rgba(0,0,0,.12) 0px 0px 10px;height:40px;width:40px;background:#1671ee;border-radius:20px;display:flex;justify-content:center;align-items:center}

/*# sourceMappingURL=../sourceMap/chrome/css/interactive_balloon.css.map*/</style></template></div></body></html>